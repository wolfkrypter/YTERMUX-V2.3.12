ytermux=$(mktemp)
base64 -d >${ytermux}<<code_cif64






#!/bin/bash


########################
# INFORMACIÓN SUB-WARE #
#★★★★★★★★★★★★★★★★★★★★★★#
#                      #
#  Author: Wolkrypter  #
#  S-ware: YTERMUX-V2  #
#  TPL:    Bash$cript  #
#  Date:   12/03/2025  #
#                      #
#★★★★★★★★★★★★★★★★★★★★★★#

function mytermx {



clear
echo -e "\n"








echo -e "\033[1;99;37m==================================================================================\033[0m"
echo -e "\033[1;99;37m   ____  _____   _________   _______   ______    __      __  __    __ __      __  \033[0m"
echo -e "\033[1;99;37m  |_  _| |_  _| | __   _  | | ____  | | ____ \  |  \    /  | | |  | | \ \    / /  \033[0m"
echo -e "\033[1;99;37m    \ \   / /   |_| | | |_| | |   |_| | |   \ \ |   \  /   | | |  | |  \ \  / /   \033[0m"
echo -e "\033[1;99;37m     \ \ / /        | |     | |___    | |___/ / |  \ \/ /| | | |  | |   \ \/ /    \033[0m"
echo -e "\033[1;99;37m      \   /         | |     |  ___|   |      /  |  |\  / | | | |  | |    \  /     \033[0m"
echo -e "\033[1;99;37m       |  |         | |     | |   __  |  |\  \  |  | \/  | | | |  | |   / /\ \    \033[0m"
echo -e "\033[1;99;37m      _|  |_       _| |_    | |___| | |  | \  \ |  |     | | | |__| |  / /  \ \   \033[0m"
echo -e "\033[1;99;37m      |_____|     |_____|   |_______| |__|  \__\|__|     |_|  \_____/ /_/    \_\  \033[0m"
echo -e ""

echo -e "\033[1;37m==================================================================================\033[0m"


echo -e "\033[1;37m[☣] Sub-software:\033[0m https://github.com/wolfkrypter/YTERMUX-V2.3.12"
echo ""
echo -e "\033[1;37m[☣] Author:\033[0m Wolfkrypter"
echo -e "\033[1;37m==================================================================================\033[0m"

echo ""
echo -e "\033[1;37m[☣] Conectividad: Virtual private network(Excepto para YouTube) | [ETC]\033[0m\n"
echo -e "\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z | OPCIÓN 3\033[0m\n\n"




echo -e "\033[1;37m[1]\033[0m Extracodificación de audio streaming"
echo ""
echo -e "\033[1;37m[2]\033[0m Extracodificación audiovisual streaming"
echo ""
echo -e "\033[1;37m[3]\033[0m Salir"
echo ""






read -p "[☣] Digite selección: " -e q


}









function q1 {






while true;

do


echo -e "\n\n\n\033[1;37m[☣] MODULO DE EXTRACODIFICACIÓN DE AUDIO STREAMING\033[0m"

echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z | OPCIÓN 5\033[0m\n\n"



echo -e "\033[1;37m[1]\033[0m audio url streaming\n"



echo -e "\033[1;37m[2]\033[0m audio ytsearch\n"


echo -e "\033[1;37m[3]\033[0m audio url streaming | CUENTA STREAMING\n"


echo -e "\033[1;37m[4]\033[0m menú\n"


echo -e "\033[1;37m[5]\033[0m salir\n"

read -p "[☣] Digite selección: " -e md3



case $md3 in






############ MODULO DE EXTRACODIFICACIÓN URL-AUDIO ##############
#
#





1)






# SECCIÓN 1

echo -e "\n\n\n\033[1;37m[☣] SUB-MODULO DE EXTRACODIFICACIÓN DE AUDIO-URL-STREAMING\033[0m"

echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"
echo -e "\033[1;37mPlataformas:\033[0m \033[0;47;30m You\033[0m\033[0;41;37mTube \033[0m \033[0;37m|\033[0m \033[0;44;37m Facebook™ \033[0m \033[0;37m|\033[0m \033[0;46;37m Vimeo \033[0m \033[0;37m|\033[0m \033[0;37m[\033[0m\033[0;37mETC\033[0m\033[0;37m]\033[0m"



echo -e "\n\n\033[1;37mEjemplo de URL:\033[0m https://m.youtube.com/watch?v=w-o3jDYo8ew\n\n\n"


read -p "[☣] Digite URL: " -e u






if [[ -z ${u} ]]
then



echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"



unset -v inf1
unset -v f1
unset -v vtd1




sleep 1
exit
fi









dtime1=$(date +%s)





echo -e "\n\033[1;37m\n\n[Inicializando descarga | AUDIO-URL-STREAMING]\033[0m\n\n"



############ VARIABLES TEMPORALES ##############
#
#


inf1=$(mktemp)
 

######################


f1=$(mktemp)


#
#
############ VARIABLES TEMPORALES ##############








############ EJECUCIÓN DE COMANDO YT-DLP #####################
#
#



yt-dlp --continue --embed-thumbnail --print-to-file "after_move:filepath" "$f1" --output-na-placeholder "[Dato indeterminado]" --no-keep-video -P "/data/data/com.termux/files/home/storage/downloads" --no-mtime --no-warnings -o "%(title)s [YTERMUX-V2].%(ext)s" --print-to-file "%(title)s" "$inf1" -x --audio-format mp3 $u


#
#
############ EJECUCIÓN DE COMANDO YT-DLP #####################






file_scanner1=$(cat $f1)





infv1=$(cat $inf1)






############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############
#
#



if [[ -f "${file_scanner1}" ]]
then









############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#


f1_1=$(cat $f1)


#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################







############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#





read fd1 _ < <(ffmpeg -i "$f1_1" |& awk '/Duration:/ {print $2}')

vtd1=$(mktemp)

echo "$fd1" > "$vtd1"


read fileduracion1 _ < <(sed -e 's/\,//g' "$vtd1")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize1 _ < <(du -h "$f1_1")






#
#
#
################# TAMAÑO DE FICHERO ####################











echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-URL-STREAMING]\033[0m"











echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv1]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize1]\n"


echo -e "\n\033[1;37m[☣] Tiempo de descarga:\033[0m  [$fileduracion1]\n"


dfdload1=$(date +%c)
echo -e "\n\033[1;37m[☣] Fecha de descarga:\033[0m   [$dfdload1]\n"


dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Exitosa]\n"












unset -v inf1
unset -v f1
unset -v vtd1





echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-URL-STREAMING]\033[0m\n\n\n"











echo -e "\e[1;37m               ________   _________  ______   _______  __________   ______     \e[0m"
echo -e "\e[1;37m              / _______ \ | _____  \ |__ __| / ______\ |____ ____| / ___  \    \e[0m"
echo -e "\e[1;37m              | |     |_| | |___/  /   | |   | |_____      | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |      __ |  ___  /    | |   \_____  \     | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |_____| | |  |  \  \ __| |__  _____| |     | |     | |__| |    \e[0m"
echo -e "\e[1;37m               \________| |__|   \__\|_____| |_______/     |_|     \______/    \e[0m"
echo -e ""
echo -e ""




echo -e "\e[1;37m                     __       ___ ________  ______  ___    __  _______          \e[0m"
echo -e "\e[1;37m                     \ \     /  / |__  __| | _____| |   \  | | | _____|         \e[0m"
echo -e "\e[1;37m                      \ \   /  /    | |    | |____  | |\ \ | | | |____          \e[0m"
echo -e "\e[1;37m                       \ \ /  /     | |    | _____| | | \ \| | | _____|         \e[0m"
echo -e "\e[1;37m                        \ V  /    __| |__  | |____  | |  \   | | |____          \e[0m"
echo -e "\e[1;37m                         \__/     |______| |______| |_|   \__| |______|         \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m             ________   ________    _______  __    __  __________   _______   \e[0m"
echo -e "\e[1;37m             | ______ \  | _____ \  / _____ \ | \   | | |___  ____| /  ____ \  \e[0m"
echo -e "\e[1;37m             | |_____) | | |___/  | | |   | | |  \  | |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             |  _____ /  | ___  _/  | |   | | | |\ \| |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |  \ \   | |   | | | | \   |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |   \ \  | |___| | | |  \  |     | |     | |___| |  \e[0m"
echo -e "\e[1;37m             |_|         |_|    \_\ \_______/ |_|   \_|     |_|     \_______/  \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m                  _____    _____  _____________   ________        ____        \e[0m"
echo -e "\e[1;37m                  |_    \  /   _| |  ___  ___  |  /  ____  \     / _   |       \e[0m"
echo -e "\e[1;37m                    | |\ \/ /| |  |_|  | |   |_|  |_|   / /     / /  | |       \e[0m"
echo -e "\e[1;37m                    | | \  / | |       | |             / /     / /   | |       \e[0m"
echo -e "\e[1;37m                    | |  \/  | |       | |            / /     / /____| |__     \e[0m"
echo -e "\e[1;37m                    | |      | |       | |           / /     /______   ___|   \e[0m"
echo -e "\e[1;37m                   _| |_    _| |_    __| |__        / /______      _|  |__    \e[0m"
echo -e "\e[1;37m                   |___|    |___|    |_____|       |_________|    |______|    \e[0m"
echo -e ""
echo -e ""


















exit





else


echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING]\033[0m\n"
dfdload1=$(date +%c)


echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING\033[0m\n\n"
echo -e "\n\033[1;37m[☣] Fecha de ejecución:\033[0m  [$dfdload1]\n"

echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Fallida]\n"



dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n\n\n"





echo -e "\033[1;37m[Saliendo de YTERMUX]\033[0m\n\n"

unset -v inf1
unset -v f1
unset -v vtd1



exit



fi


#
#
#
############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############





;;











#####################################################################################################################














############ MODULO DE EXTRACODIFICACIÓN YTSEARCH-AUDIO ##############
#
#





2)


# SECCIÓN 2

echo -e "\n\n\n\033[1;37m[☣] SUB-MODULO DE EXTRACODIFICIÓN DE AUDIO YTSEARCH\033[0m"

echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"



echo -e "\033[1;37mPlataforma:\033[0m \033[0;47;30m You\033[0m\033[0;41;37mTube \033[0m"

echo -e "\n\n\033[1;37mEjemplo | Buscar:\033[0m Armas silenciosas - Los Suziox"


echo -e "\n"



read -p "[☣] Buscar: " -e bsc




if [[ -z ${bsc} ]]
 then



echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"









unset -v inf4
unset -v f2
unset -v vtd2




sleep 1
exit
fi






dtime4=$(date +%s)


f2=$(mktemp)

echo -e "\n\n\n\033[1;37m[Inicializando descarga | AUDIO-YTSEARCH]\033[0m\n\n"




inf4=$(mktemp)




yt-dlp ytsearch:"$bsc" --continue --no-keep-video --print-to-file "after_move:filepath" "$f2" -P "/data/data/com.termux/files/home/storage/downloads" -o "%(title)s [YTERMUX-V2].%(ext)s" --no-mtime --no-warnings --print-to-file "%(title)s" "$inf4" --extract-audio --audio-format mp3 --output-na-placeholder "[Dato indeterminado]" --embed-thumbnail

















file_scanner2=$(cat $f2)


infv4=$(cat $inf4)








if [[ -f "${file_scanner2}" ]]
then







############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#



f2_2=$(cat $f2)



#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################




############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#




read fd2 _ < <(ffmpeg -i "$f2_2" |& awk '/Duration:/ {print $2}')

vtd2=$(mktemp)

echo "$fd2" > "$vtd2"


read fileduracion2 _ < <(sed -e 's/\,//g' "$vtd2")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize2 _ < <(du -h "$f2_2")




#
#
#
################# TAMAÑO DE FICHERO ####################

















echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-YTSEARCH]\033[0m\n\n\n"











echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-YTSEARCH\033[0m\n\n"


  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv4]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize2]\n"


echo -e "\n\033[1;37m[☣] Tiempo de descarga:\033[0m  [$fileduracion2]\n"


dfdload4=$(date +%c)
echo -e "\n\033[1;37m[☣] Fecha de descarga:\033[0m   [$dfdload4]\n"


dDload4=$(date -u -d @$(($(date +%s) - $dtime4)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload4]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Exitosa]\n"






































echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-YTSEARCH]\033[0m\n\n\n"



unset -v inf4
unset -v f2
unset -v vtd2










echo -e "\e[1;37m               ________   _________  ______   _______  __________   ______     \e[0m"
echo -e "\e[1;37m              / _______ \ | _____  \ |__ __| / ______\ |____ ____| / ___  \    \e[0m"
echo -e "\e[1;37m              | |     |_| | |___/  /   | |   | |_____      | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |      __ |  ___  /    | |   \_____  \     | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |_____| | |  |  \  \ __| |__  _____| |     | |     | |__| |    \e[0m"
echo -e "\e[1;37m               \________| |__|   \__\|_____| |_______/     |_|     \______/    \e[0m"
echo -e ""
echo -e ""




echo -e "\e[1;37m                     __       ___ ________  ______  ___    __  _______          \e[0m"
echo -e "\e[1;37m                     \ \     /  / |__  __| | _____| |   \  | | | _____|         \e[0m"
echo -e "\e[1;37m                      \ \   /  /    | |    | |____  | |\ \ | | | |____          \e[0m"
echo -e "\e[1;37m                       \ \ /  /     | |    | _____| | | \ \| | | _____|         \e[0m"
echo -e "\e[1;37m                        \ V  /    __| |__  | |____  | |  \   | | |____          \e[0m"
echo -e "\e[1;37m                         \__/     |______| |______| |_|   \__| |______|         \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m             ________   ________    _______  __    __  __________   _______   \e[0m"
echo -e "\e[1;37m             | ______ \  | _____ \  / _____ \ | \   | | |___  ____| /  ____ \  \e[0m"
echo -e "\e[1;37m             | |_____) | | |___/  | | |   | | |  \  | |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             |  _____ /  | ___  _/  | |   | | | |\ \| |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |  \ \   | |   | | | | \   |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |   \ \  | |___| | | |  \  |     | |     | |___| |  \e[0m"
echo -e "\e[1;37m             |_|         |_|    \_\ \_______/ |_|   \_|     |_|     \_______/  \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m                  _____    _____  _____________   ________        ____        \e[0m"
echo -e "\e[1;37m                  |_    \  /   _| |  ___  ___  |  /  ____  \     / _   |       \e[0m"
echo -e "\e[1;37m                    | |\ \/ /| |  |_|  | |   |_|  |_|   / /     / /  | |       \e[0m"
echo -e "\e[1;37m                    | | \  / | |       | |             / /     / /   | |       \e[0m"
echo -e "\e[1;37m                    | |  \/  | |       | |            / /     / /____| |__     \e[0m"
echo -e "\e[1;37m                    | |      | |       | |           / /     /______   ___|   \e[0m"
echo -e "\e[1;37m                   _| |_    _| |_    __| |__        / /______      _|  |__    \e[0m"
echo -e "\e[1;37m                   |___|    |___|    |_____|       |_________|    |______|    \e[0m"
echo -e ""
echo -e ""





exit



else







echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-YTSEARCH]\033[0m\n\n\n"

dfdload4=$(date +%c)


echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-YTSEARCH\033[0m\n\n"


  echo -e "\033[1;37m[☣] Fecha de ejecución:\033[0m  [$dfdload4]\n"


echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Fallida]\n"


dDload4=$(date -u -d @$(($(date +%s) - $dtime4)) +%T)



echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload4]\n\n\n"




echo -e "\033[1;37m[Saliendo de YTERMUX]\033[0m\n\n\n"



unset -v inf4
unset -v f2
unset -v vtd2

exit




fi


;;





3) 








echo -e "\n\n\n\033[1;37m[☣] SUB-MODULO DE EXTRACODIFICACIÓN AUDIO-URL-STREAMING-CUENTA\033[0m"

echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"




echo -e "\033[1;37mPlataformas:\033[0m \033[0;44;37m Facebook™ \033[0m \033[0;37m|\033[0m \033[0;46;37m Vimeo \033[0m \033[0;37m|\033[0m \033[0;37m[\033[0m\033[0;37mETC\033[0m\033[0;37m]\033[0m"




echo -e -n "\n\n\n\033[1;37m[☣] CUENTA DE PLATAFORMA STREAMING | AUDIO-URL-STREAMING-CUENTA\033[0m\n\n\n"




read -p "[☣] Usuario/email: " -e user3




if [[ -z ${user3} ]]
 then



echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"



sleep 1
echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"







unset -v inf1
unset -v vtd1
unset -v f1







sleep 1
exit
fi

echo ""
echo ""




read -p "[☣] Contraseña: " -e pass3





echo ""
echo ""


if [[ -z ${pass3} ]]
then



echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"



sleep 1
echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERTMUX\n\n\n"







unset -v inf1
unset -v vtd1
unset -v f1







sleep 1
exit
fi






echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"



echo -e "\033[1;37mEjemplo de URL:\033[0m https://m.youtube.com/watch?v=w-o3jDYo8ew\n\n\n"


read -p "[☣] Digite URL: " -e u






if [[ -z ${u} ]]
then



echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"



unset -v inf1
unset -v f1
unset -v vtd1




sleep 1
exit
fi











dtime1=$(date +%s)





echo -e "\n\033[1;37m\n\n[Inicializando descarga | AUDIO-URL-STREAMIMG-CUENTA]\033[0m\n\n"



############ VARIABLES TEMPORALES ##############
#
#


inf1=$(mktemp)
 

######################


f1=$(mktemp)


#
#
############ VARIABLES TEMPORALES ##############









############ EJECUCIÓN DE COMANDO YT-DLP #####################
#
#



yt-dlp --continue --legacy-server-connect --username="$user3" --password="$pass3" --embed-thumbnail --print-to-file "after_move:filepath" "$f1" --output-na-placeholder "[Dato indeterminado]" --no-keep-video -P "/data/data/com.termux/files/home/storage/downloads" --no-mtime --no-warnings -o "%(title)s [YTERMUX-V2].%(ext)s" --print-to-file "%(title)s" "$inf1" --extract-audio --audio-format mp3 $u


#
#
############ EJECUCIÓN DE COMANDO YT-DLP #####################






file_scanner1=$(cat $f1)


infv1=$(cat $inf1)






############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############
#
#



if [[ -f "${file_scanner1}" ]]
then









############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#


f1_1=$(cat $f1)


#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################







############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#





read fd1 _ < <(ffmpeg -i "$f1_1" |& awk '/Duration:/ {print $2}')

vtd1=$(mktemp)

echo "$fd1" > "$vtd1"


read fileduracion1 _ < <(sed -e 's/\,//g' "$vtd1")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize1 _ < <(du -h "$f1_1")






#
#
#
################# TAMAÑO DE FICHERO ####################











echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-URL-STREAMING-CUENTA]\033[0m"











echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-CUENTA\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv1]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize1]\n"


echo -e "\n\033[1;37m[☣] Tiempo de descarga:\033[0m  [$fileduracion1]\n"


dfdload1=$(date +%c)
echo -e "\n\033[1;37m[☣] Fecha de descarga:\033[0m   [$dfdload1]\n"


dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Exitosa]\n"












unset -v inf1
unset -v f1
unset -v vtd1





echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-URL-STREAMIMG-CUENTA]\033[0m\n\n\n"











echo -e "\e[1;37m               ________   _________  ______   _______  __________   ______     \e[0m"
echo -e "\e[1;37m              / _______ \ | _____  \ |__ __| / ______\ |____ ____| / ___  \    \e[0m"
echo -e "\e[1;37m              | |     |_| | |___/  /   | |   | |_____      | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |      __ |  ___  /    | |   \_____  \     | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |_____| | |  |  \  \ __| |__  _____| |     | |     | |__| |    \e[0m"
echo -e "\e[1;37m               \________| |__|   \__\|_____| |_______/     |_|     \______/    \e[0m"
echo -e ""
echo -e ""




echo -e "\e[1;37m                     __       ___ ________  ______  ___    __  _______          \e[0m"
echo -e "\e[1;37m                     \ \     /  / |__  __| | _____| |   \  | | | _____|         \e[0m"
echo -e "\e[1;37m                      \ \   /  /    | |    | |____  | |\ \ | | | |____          \e[0m"
echo -e "\e[1;37m                       \ \ /  /     | |    | _____| | | \ \| | | _____|         \e[0m"
echo -e "\e[1;37m                        \ V  /    __| |__  | |____  | |  \   | | |____          \e[0m"
echo -e "\e[1;37m                         \__/     |______| |______| |_|   \__| |______|         \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m             ________   ________    _______  __    __  __________   _______   \e[0m"
echo -e "\e[1;37m             | ______ \  | _____ \  / _____ \ | \   | | |___  ____| /  ____ \  \e[0m"
echo -e "\e[1;37m             | |_____) | | |___/  | | |   | | |  \  | |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             |  _____ /  | ___  _/  | |   | | | |\ \| |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |  \ \   | |   | | | | \   |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |   \ \  | |___| | | |  \  |     | |     | |___| |  \e[0m"
echo -e "\e[1;37m             |_|         |_|    \_\ \_______/ |_|   \_|     |_|     \_______/  \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m                  _____    _____  _____________   ________        ____        \e[0m"
echo -e "\e[1;37m                  |_    \  /   _| |  ___  ___  |  /  ____  \     / _   |       \e[0m"
echo -e "\e[1;37m                    | |\ \/ /| |  |_|  | |   |_|  |_|   / /     / /  | |       \e[0m"
echo -e "\e[1;37m                    | | \  / | |       | |             / /     / /   | |       \e[0m"
echo -e "\e[1;37m                    | |  \/  | |       | |            / /     / /____| |__     \e[0m"
echo -e "\e[1;37m                    | |      | |       | |           / /     /______   ___|   \e[0m"
echo -e "\e[1;37m                   _| |_    _| |_    __| |__        / /______      _|  |__    \e[0m"
echo -e "\e[1;37m                   |___|    |___|    |_____|       |_________|    |______|    \e[0m"
echo -e ""
echo -e ""


















exit





else


echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMIMG-CUENTA]\033[0m\n"
dfdload1=$(date +%c)


echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-CUENTA\033[0m\n\n"
echo -e "\n\033[1;37m[☣] Fecha de ejecución:\033[0m  [$dfdload1]\n"

echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Fallida]\n"



dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n\n\n"





echo -e "\033[1;37m[Saliendo de YTERMUX]\033[0m\n\n"

unset -v inf1
unset -v f1
unset -v vtd1



exit



fi


#
#
#
############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############








 ;;


# Salida


4) echo ""


;;


5)


echo -e "\033[1;37m\n\n\n[Saliendo de YTDLP-TERMUX-V2 | YTERMUX-V2]\033[0m\n"
sleep 1

exit
# Salida





;;


*) # Ingreso incorrecto reintente nuevamente.

echo -e "\n\n\n\033[1;37m[\033[0m\033[2;33m INF/ERROR\033[0m \033[0;37m|\033[0m INGRESO INCORRECTO REINTENTE NUEVAMENTE \033[1;37m]\033[0m"
sleep 1

;;


esac

break

done


}








function q2 {




while true; 

do




echo -e "\n\n\n\033[1;37m[☣] MODULO DE EXTRACODIFICACIÓN AUDIOVISUAL STREAMING\033[0m"


echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z | OPCIÓN 6\033[0m\n\n"


echo -e "\033[1;37m[1]\033[0m single-streaming\n\n"



echo -e "\033[1;37m[2]\033[0m duo-streaming\n\n"

echo -e "\033[1;37m[3]\033[0m single-streaming | CUENTA STREAMING\n\n"


echo -e "\033[1;37m[4]\033[0m duo-streaming    | CUENTA STREAMING\n\n"


echo -e "\033[1;37m[5]\033[0m menú\n\n"

echo -e "\033[1;37m[6]\033[0m salir\n\n"




read -p "[☣] Digite selección: " -e md4








case $md4 in

1)


# SECCIÓN 3

echo -e "\n\n\n\033[1;37m[☣] SUB-MODULO SINGLE-STREAMING\033[0m"



echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"




# Plataformas


echo -e "\033[1;37mPlataformas:\033[0m \033[0;666;31m X\033[0m\033[0;666;37mvideos\033[0m \033[0;37m|\033[0m \033[0;37m[\033[0mETC\033[0;37m]\033[0m"

echo -e "\n\n\033[1;37mEjemplo/URL:\033[0m https://www.xvideos.com/video.ihbflco44bc/blancanieves_masturbandose\n\n\n"






read -p "[☣] Digite URL: " -e uvs







if [[ -z ${uvs} ]]
 then





echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"








unset -v inf2
unset -v vtd3
unset -v f3







sleep 1
exit
fi




echo -e -n "\n\n\n\033[1;37m[Procesando formatos | SINGLE-STREAMING]\033[0m\n\n\n"
yt-dlp --no-warnings --list-formats $uvs



echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"


echo -e -n "[☣] Ejemplo  \e[0;33mID\e[0m: \e[32mhls-360p\e[0m\n\n\n"






read -p "[☣] Digite ID: " -e i








if [[ -z ${i} ]]
then








echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"








unset -v inf2
unset -v f3
unset -v vtd3






sleep 1
exit
fi





dtime2=$(date +%s)


echo -e "\n\n\n\033[1;37m[Inicializando descarga | SINGLE-STREAMING]\033[0m\n\n"




######## Variables temporales ########
#
#

inf2=$(mktemp)

####################

f3=$(mktemp)


#
#
######## Variables temporales ########

#"/storage/emulated/0/Download






yt-dlp --part --print-to-file "after_move:filepath" "$f3" --print-to-file "%(title)s" "$inf2" -P "/data/data/com.termux/files/home/storage/downloads" -f $i --no-warnings --no-mtime --merge-output-format mp4 -o "%(title)s [YTERMUX-V2].%(ext)s" --embed-subs $uvs






file_scanner3=$(cat $f3)




infv2=$(cat $inf2)









if [[ -f "${file_scanner3}" ]]
then




############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#


f3_3=$(cat $f3)


#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################




############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#





read fd3 _ < <(ffmpeg -i "$f3_3" |& awk '/Duration:/ {print $2}')

vtd3=$(mktemp)

echo "$fd3" > "$vtd3"


read fileduracion3 _ < <(sed -e 's/\,//g' "$vtd3")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize3 _ < <(du -sh "$f3_3")






#
#
#
################# TAMAÑO DE FICHERO ####################






echo -e "\n\n\n\033[1;37m[Descarga exitosa | SINGLE-STREAMING]\033[0m\n\n\n"













echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | SINGLE-STREAMING\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv2]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp4]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize3]\n"


echo -e "\n\033[1;37m[☣] Tiempo de descarga:\033[0m  [$fileduracion3]\n"


dfdload2=$(date +%c)
echo -e "\n\033[1;37m[☣] Fecha de descarga:\033[0m   [$dfdload2]\n"


dDload2=$(date -u -d @$(($(date +%s) - $dtime2)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload2]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Exitosa]\n"







unset -v inf2
unset -v vtd3
unset -v f3



echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | SINGLE-STREAMING]\033[0m\n\n\n"















echo -e "\e[1;37m               ________   _________  ______   _______  __________   ______     \e[0m"
echo -e "\e[1;37m              / _______ \ | _____  \ |__ __| / ______\ |____ ____| / ___  \    \e[0m"
echo -e "\e[1;37m              | |     |_| | |___/  /   | |   | |_____      | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |      __ |  ___  /    | |   \_____  \     | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |_____| | |  |  \  \ __| |__  _____| |     | |     | |__| |    \e[0m"
echo -e "\e[1;37m               \________| |__|   \__\|_____| |_______/     |_|     \______/    \e[0m"
echo -e ""
echo -e ""




echo -e "\e[1;37m                     __       ___ ________  ______  ___    __  _______          \e[0m"
echo -e "\e[1;37m                     \ \     /  / |__  __| | _____| |   \  | | | _____|         \e[0m"
echo -e "\e[1;37m                      \ \   /  /    | |    | |____  | |\ \ | | | |____          \e[0m"
echo -e "\e[1;37m                       \ \ /  /     | |    | _____| | | \ \| | | _____|         \e[0m"
echo -e "\e[1;37m                        \ V  /    __| |__  | |____  | |  \   | | |____          \e[0m"
echo -e "\e[1;37m                         \__/     |______| |______| |_|   \__| |______|         \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m             ________   ________    _______  __    __  __________   _______   \e[0m"
echo -e "\e[1;37m             | ______ \  | _____ \  / _____ \ | \   | | |___  ____| /  ____ \  \e[0m"
echo -e "\e[1;37m             | |_____) | | |___/  | | |   | | |  \  | |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             |  _____ /  | ___  _/  | |   | | | |\ \| |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |  \ \   | |   | | | | \   |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |   \ \  | |___| | | |  \  |     | |     | |___| |  \e[0m"
echo -e "\e[1;37m             |_|         |_|    \_\ \_______/ |_|   \_|     |_|     \_______/  \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m                  _____    _____  _____________   ________        ____        \e[0m"
echo -e "\e[1;37m                  |_    \  /   _| |  ___  ___  |  /  ____  \     / _   |       \e[0m"
echo -e "\e[1;37m                    | |\ \/ /| |  |_|  | |   |_|  |_|   / /     / /  | |       \e[0m"
echo -e "\e[1;37m                    | | \  / | |       | |             / /     / /   | |       \e[0m"
echo -e "\e[1;37m                    | |  \/  | |       | |            / /     / /____| |__     \e[0m"
echo -e "\e[1;37m                    | |      | |       | |           / /     /______   ___|   \e[0m"
echo -e "\e[1;37m                   _| |_    _| |_    __| |__        / /______      _|  |__    \e[0m"
echo -e "\e[1;37m                   |___|    |___|    |_____|       |_________|    |______|    \e[0m"
echo -e ""
echo -e ""













exit





else


echo -e "\n\n\n\033[1;37m[Descarga fallida | SINGLE-STREAMING]\033[0m\n\n\n"


echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | SINGLE-STREAMING\033[0m\n\n"




dfdload2=$(date +%c)
 
  echo -e "\033[1;37m[☣] Fecha de ejecución:\033[0m  [$dfdload2]\n"




echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Fallida]\n"


dDload2=$(date -u -d @$(($(date +%s) - $dtime2)) +%T)


echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload2]\n\n\n"


echo -e "\033[1;37m[Saliendo de YTERMUX]\033[0m\n\n\n"





unset -v inf2
unset -v vtd3
unset -v f3






exit




fi



;;



2)




# SECCIÓN 4


echo -e "\n\n\n\033[1;37m[☣] MODULO DE DESCARGA DUO-STREAMING\033[0m"




echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"





echo -e "\033[1;37mPlataformas:\033[0m \033[0;47;30m You\033[0m\033[0;41;37mTube \033[0m \033[0;37m|\033[0m \033[0;44;37m Facebook™ \033[0m \033[0;37m|\033[0m \033[0;46;37m Vimeo \033[0m \033[0;37m|\033[0m \033[0;37m[\033[0mETC\033[0;37m]\033[0m"


echo -e "\n\n\033[1;37mEjemplo/URL:\033[0m https://m.youtube.com/watch?v=w-o3jDYo8ew\n"





echo ""

read -p "[☣] Digite URL: " -e uvd



if [[ -z ${uvd} ]]
 then




echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"


sleep 1
echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"





unset -v inf2
unset -v vtd4
unset -v f4






sleep 1
exit
fi









echo -e -n "\n\n\n\033[1;37m[Procesando formatos | DUO-STREAMING]\033[0m\n\n\n"




yt-dlp --no-warnings --list-formats $uvd




echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"



echo -e -n "[☣] Ejemplo \e[0;33mID\e[0m | \e[0;33mVIDEO\e[0m: \e[32m136\e[0m\n\n\n"




read -p "[☣] Digite ID | VIDEO: " -e i1




if [[ -z ${i1} ]]
then






echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m"

sleep 1
echo -e "\n\n\n\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"







unset -v inf2
unset -v vtd4
unset -v f4



sleep 1
exit
fi




echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"




echo -e -n "[☣] Ejemplo \e[0;33mID\e[0m | \e[0;33mAUDIO\e[0m: \e[32m251\e[0m\n\n\n"








read -p "[☣] Digite ID | AUDIO: " -e i2




if [[ -z ${i2} ]]
then







echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m"

sleep 1
echo -e "\n\n\n\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"


unset -v inf2
unset -v vtd4
unset -v f4



sleep 1
exit
fi



dtime3=$(date +%s)










echo -e "\n\n\n\033[1;37m[Inicializando descarga | DUO-STREAMING]\033[0m\n\n"



################## VARIABLES TEMPORALES ######
#

inf3=$(mktemp)

##################

f4=$(mktemp)

#
################## VARIABLES TEMPORALES ######






yt-dlp --part --print-to-file "after_move:filepath" "$f4" --no-keep-video -o "%(title)s [YTERMUX-V2].%(ext)s" --print-to-file "%(title)s" "$inf3" -P "/data/data/com.termux/files/home/storage/downloads" -f $i1+$i2 --no-mtime --no-warnings --merge-output-format mp4 --output-na-placeholder "[Dato indeterminado]" --embed-subs $uvd





















file_scanner4=$(cat $f4)




infv3=$(cat $inf3)










if [[ -f "${file_scanner4}" ]]
then










############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#


f4_4=$(cat $f4)


#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################




############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#




read fd4 _ < <(ffmpeg -i "$f4_4" |& awk '/Duration:/ {print $2}')

vtd4=$(mktemp)

echo "$fd4" > "$vtd4"

read fileduracion4 _ < <(sed -e 's/\,//g' "$vtd4")





#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############






################## TAMAÑO DE FICHERO ##################
#
#
#






read filesize4 _ < <(du -h "$f4_4")






#
#
#
################# TAMAÑO DE FICHERO ####################










echo -e "\n\n\n\033[1;37m[Descarga exitosa | DUO-STREAMING]\033[0m\n\n\n"









echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | DUO-STREAMING\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv3]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp4]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize4]\n"


echo -e "\n\033[1;37m[☣] Tiempo de descarga:\033[0m  [$fileduracion4]\n"


dfdload3=$(date +%c)
echo -e "\n\033[1;37m[☣] Fecha de descarga:\033[0m   [$dfdload3]\n"


dDload3=$(date -u -d @$(($(date +%s) - $dtime3)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload3]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Exitosa]\n"




































unset -v inf3
unset -v f4
unset -v vtd4








echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | DUO-STREAMING]\033[0m\n\n\n"








echo -e "\e[1;37m               ________   _________  ______   _______  __________   ______     \e[0m"
echo -e "\e[1;37m              / _______ \ | _____  \ |__ __| / ______\ |____ ____| / ___  \    \e[0m"
echo -e "\e[1;37m              | |     |_| | |___/  /   | |   | |_____      | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |      __ |  ___  /    | |   \_____  \     | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |_____| | |  |  \  \ __| |__  _____| |     | |     | |__| |    \e[0m"
echo -e "\e[1;37m               \________| |__|   \__\|_____| |_______/     |_|     \______/    \e[0m"
echo -e ""
echo -e ""




echo -e "\e[1;37m                     __       ___ ________  ______  ___    __  _______          \e[0m"
echo -e "\e[1;37m                     \ \     /  / |__  __| | _____| |   \  | | | _____|         \e[0m"
echo -e "\e[1;37m                      \ \   /  /    | |    | |____  | |\ \ | | | |____          \e[0m"
echo -e "\e[1;37m                       \ \ /  /     | |    | _____| | | \ \| | | _____|         \e[0m"
echo -e "\e[1;37m                        \ V  /    __| |__  | |____  | |  \   | | |____          \e[0m"
echo -e "\e[1;37m                         \__/     |______| |______| |_|   \__| |______|         \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m             ________   ________    _______  __    __  __________   _______   \e[0m"
echo -e "\e[1;37m             | ______ \  | _____ \  / _____ \ | \   | | |___  ____| /  ____ \  \e[0m"
echo -e "\e[1;37m             | |_____) | | |___/  | | |   | | |  \  | |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             |  _____ /  | ___  _/  | |   | | | |\ \| |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |  \ \   | |   | | | | \   |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |   \ \  | |___| | | |  \  |     | |     | |___| |  \e[0m"
echo -e "\e[1;37m             |_|         |_|    \_\ \_______/ |_|   \_|     |_|     \_______/  \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m                  _____    _____  _____________   ________        ____        \e[0m"
echo -e "\e[1;37m                  |_    \  /   _| |  ___  ___  |  /  ____  \     / _   |       \e[0m"
echo -e "\e[1;37m                    | |\ \/ /| |  |_|  | |   |_|  |_|   / /     / /  | |       \e[0m"
echo -e "\e[1;37m                    | | \  / | |       | |             / /     / /   | |       \e[0m"
echo -e "\e[1;37m                    | |  \/  | |       | |            / /     / /____| |__     \e[0m"
echo -e "\e[1;37m                    | |      | |       | |           / /     /______   ___|   \e[0m"
echo -e "\e[1;37m                   _| |_    _| |_    __| |__        / /______      _|  |__    \e[0m"
echo -e "\e[1;37m                   |___|    |___|    |_____|       |_________|    |______|    \e[0m"
echo -e ""
echo -e ""
















exit




else

echo -e "\n\n\n\033[1;37m[Descarga fallida | DUO-STREAMING]\033[0m\n\n\n"

dfdload3=$(date +%c)


echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | DUO-STREAMING\033[0m\n\n"


  echo -e "\033[1;37m[☣] Fecha de ejecución:\033[0m  [$dfdload3]\n"

echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Fallida]\n"


dDload3=$(date -u -d @$(($(date +%s) - $dtime3)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload3]\n\n\n"




echo -e "\033[1;37m[Saliendo de YTERMUX]\033[0m\n\n"


unset -v inf3
unset -v f4
unset -v vtd4

exit


fi


;;



3) 




# SECCIÓN 3

echo -e "\n\n\n\033[1;37m[☣] SUB-MODULO SINGLE-STREAMING-CUENTA\033[0m"






echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"


# Plataformas




echo -e "\033[1;37mPlataformas:\033[0m \033[0;666;31m X\033[0m\033[0;666;37mvideos\033[0m \033[0;37m|\033[0m \033[0;37m[\033[0mETC\033[0;37m]\033[0m"






echo -e -n "\n\n\n\033[1;37m[☣] CUENTA DE PLATAFORMA STREAMING | SINGLE-STREAMING-CUENTA\033[0m\n\n\n"




read -p "[☣] Usuario/email: " -e user1




if [[ -z ${user1} ]]
 then



echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"



sleep 1
echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"







unset -v inf2
unset -v vtd3
unset -v f3







sleep 1
exit
fi

echo ""
echo ""




read -p "[☣] Contraseña: " -e pass1






echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"
echo -e "\033[1;37mEjemplo/URL:\033[0m https://www.xvideos.com/video.ihbflco44bc/blancanieves_masturbandose"





echo ""
echo ""





read -p "[☣] Digite URL: " -e uvs




if [[ -z ${pass1} ]]
then



echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"



sleep 1
echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERTMUX\n\n\n"







unset -v inf2
unset -v vtd3
unset -v f3







sleep 1
exit
fi











if [[ -z ${uvs} ]]
 then



echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"



sleep 1
echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"







unset -v inf2
unset -v vtd3
unset -v f3







sleep 1
exit
fi









echo -e -n "\n\n\n\033[1;37m[Procesando formatos | SINGLE-STREAMING-CUENTA]\033[0m\n\n\n"





yt-dlp --username="$user1" --password="$pass1" --legacy-server-connect --no-warnings --list-formats $uvs


echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"


echo -e -n "[☣] Ejemplo \e[0;33mID\e[0m: \e[32mhls-360p\e[0m\n\n\n"


read -p "[☣] Digite ID: " -e i







if [[ -z ${i} ]]
then



echo -e "\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m"
sleep 1
echo -e "\n\n\n\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"






unset -v inf2
unset -v f3
unset -v vtd3






sleep 1
exit
fi





dtime2=$(date +%s)


echo -e "\n\n\n\033[1;37m[Inicializando descarga | SINGLE-STREAMIG-CUENTA]\033[0m\n\n"




######## Variables temporales ########
#
#

inf2=$(mktemp)

####################

f3=$(mktemp)


#
#
######## Variables temporales ########








yt-dlp --part --legacy-server-connect --username="$user1" --password="$pass1" --print-to-file "after_move:filepath" "$f3" --print-to-file "%(title)s" "$inf2" -P "/data/data/com.termux/files/home/storage/downloads" -f $i --no-warnings --no-mtime --merge-output-format mp4 -o "%(title)s [YTERMUX-V2].%(ext)s" --embed-subs $uvs











file_scanner3=$(cat $f3)




infv2=$(cat $inf2)



























if [[ -f "${file_scanner3}" ]]
then




############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#


f3_3=$(cat $f3)


#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################




############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#








read fd3 _ < <(ffmpeg -i "$f3_3" |& awk '/Duration:/ {print $2}')

vtd3=$(mktemp)







echo "$fd3" > "$vtd3"

read fileduracion3 _ < <(sed -e 's/\,//g' "$vtd3")







#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#








read filesize3 _ < <(du -h "$f3_3")




#
#
#
################# TAMAÑO DE FICHERO ####################






echo -e "\n\n\n\033[1;37m[Descarga exitosa | SINGLE-STREAMIMG-CUENTA]\033[0m\n\n\n"











echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | SINGLE-STREAMING-CUENTA\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv2]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp4]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize3]\n"


echo -e "\n\033[1;37m[☣] Tiempo de descarga:\033[0m  [$fileduracion3]\n"


dfdload2=$(date +%c)
echo -e "\n\033[1;37m[☣] Fecha de descarga:\033[0m   [$dfdload2]\n"


dDload2=$(date -u -d @$(($(date +%s) - $dtime2)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload2]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Exitosa]\n"

















unset -v inf2
unset -v vtd3
unset -v f3



echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | SINGLE-STREAMING-CUENTA]\033[0m\n\n\n"









echo -e "\e[1;37m               ________   _________  ______   _______  __________   ______     \e[0m"
echo -e "\e[1;37m              / _______ \ | _____  \ |__ __| / ______\ |____ ____| / ___  \    \e[0m"
echo -e "\e[1;37m              | |     |_| | |___/  /   | |   | |_____      | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |      __ |  ___  /    | |   \_____  \     | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |_____| | |  |  \  \ __| |__  _____| |     | |     | |__| |    \e[0m"
echo -e "\e[1;37m               \________| |__|   \__\|_____| |_______/     |_|     \______/    \e[0m"
echo -e ""
echo -e ""




echo -e "\e[1;37m                     __       ___ ________  ______  ___    __  _______          \e[0m"
echo -e "\e[1;37m                     \ \     /  / |__  __| | _____| |   \  | | | _____|         \e[0m"
echo -e "\e[1;37m                      \ \   /  /    | |    | |____  | |\ \ | | | |____          \e[0m"
echo -e "\e[1;37m                       \ \ /  /     | |    | _____| | | \ \| | | _____|         \e[0m"
echo -e "\e[1;37m                        \ V  /    __| |__  | |____  | |  \   | | |____          \e[0m"
echo -e "\e[1;37m                         \__/     |______| |______| |_|   \__| |______|         \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m             ________   ________    _______  __    __  __________   _______   \e[0m"
echo -e "\e[1;37m             | ______ \  | _____ \  / _____ \ | \   | | |___  ____| /  ____ \  \e[0m"
echo -e "\e[1;37m             | |_____) | | |___/  | | |   | | |  \  | |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             |  _____ /  | ___  _/  | |   | | | |\ \| |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |  \ \   | |   | | | | \   |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |   \ \  | |___| | | |  \  |     | |     | |___| |  \e[0m"
echo -e "\e[1;37m             |_|         |_|    \_\ \_______/ |_|   \_|     |_|     \_______/  \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m                  _____    _____  _____________   ________        ____        \e[0m"
echo -e "\e[1;37m                  |_    \  /   _| |  ___  ___  |  /  ____  \     / _   |       \e[0m"
echo -e "\e[1;37m                    | |\ \/ /| |  |_|  | |   |_|  |_|   / /     / /  | |       \e[0m"
echo -e "\e[1;37m                    | | \  / | |       | |             / /     / /   | |       \e[0m"
echo -e "\e[1;37m                    | |  \/  | |       | |            / /     / /____| |__     \e[0m"
echo -e "\e[1;37m                    | |      | |       | |           / /     /______   ___|   \e[0m"
echo -e "\e[1;37m                   _| |_    _| |_    __| |__        / /______      _|  |__    \e[0m"
echo -e "\e[1;37m                   |___|    |___|    |_____|       |_________|    |______|    \e[0m"
echo -e ""
echo -e ""













exit





else


echo -e "\n\n\n\033[1;37m[Descarga fallida | SINGLE-STREAMING-CUENTA]\033[0m\n\n\n"


echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | SINGLE-STREAMING-CUENTA\033[0m\n\n"




dfdload2=$(date +%c)
echo -e "\033[1;37m[☣] Fecha de ejecución:\033[0m  [$dfdload2]\n"




echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Fallida]\n"


dDload2=$(date -u -d @$(($(date +%s) - $dtime2)) +%T)


echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload2]\n\n\n"


echo -e "\033[1;37m[Saliendo de YTERMUX]\033[0m\n\n\n"





unset -v inf2
unset -v vtd3
unset -v f3






exit




fi


;;




4)


echo -e "\n\n\n\033[1;37m[☣] MODULO DE DESCARGA DUO-STREAMING-CUENTA\033[0m"



echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"



echo -e "\033[1;37mPlataformas:\033[0m \033[0;44;37m Facebook™ \033[0m \033[0;37m|\033[0m \033[0;46;37m Twitter \033[0m \033[0;37m|\033[0m \033[0;37m[\033[0mETC\033[0;37m]\033[0m"







echo -e -n "\n\n\n\033[1;37m[☣] CUENTA DE PLATAFORMA STREAMING | DUO-STREAMING-CUENTA\033[0m\n\n\n"






read -p "[☣] Usuario/email: " -e user2





if [[ -z ${user2} ]]
 then



echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"



sleep 1
echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"







unset -v inf2
unset -v vtd3
unset -v f3







sleep 1
exit
fi

echo ""
echo ""


read -p "[☣] Contraseña: " -e pass2










if [[ -z ${pass2} ]]
 then



echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"



sleep 1
echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"







unset -v inf2
unset -v vtd3
unset -v f3







sleep 1
exit7
fi

echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"



echo -e "\033[1;37mEjemplo/URL:\033[0m https://m.youtube.com/watch?v=w-o3jDYo8ew"


echo ""
echo ""


read -p "[☣] Digite URL: " -e uvd





if [[ -z ${uvd} ]]
 then




echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"



sleep 1
echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"





unset -v inf2
unset -v vtd4
unset -v f4






sleep 1
exit
fi






echo ""





echo -e -n "\n\n\033[1;37m[Procesando formatos | DUO-STREAMING-CUENTA]\033[0m\n\n\n"









yt-dlp --legacy-server-connect --username="$user2" --password="$pass2" --no-warnings --list-formats $uvd



echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"



echo -e -n "[☣] Ejemplo \e[0;33mID\e[0m | \e[0;33mVIDEO\e[0m: \e[32m136\e[0m\n\n"






read -p "[☣] Digite ID | VIDEO: " -e i1








if [[ -z ${i1} ]]
then






echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m"

sleep 1
echo -e "\n\n\n\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"


unset -v inf2
unset -v vtd4
unset -v f4



sleep 1
exit
fi




echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"




echo -e -n "[☣] Ejemplo \e[0;33mID\e[0m | \e[0;33mAUDIO\e[0m:  \e[32m251\e[0m\n\n"





read -p "[☣] Digite ID | AUDIO: " -e i2





if [[ -z ${i2} ]]
then







echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m"

sleep 1
echo -e "\n\n\n\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX\n\n\n"


unset -v inf2
unset -v vtd4
unset -v f4



sleep 1
exit
fi



dtime3=$(date +%s)


echo -e "\n\n\n\033[1;37m[Inicializando descarga | DUO-STREAMING-CUENTA]\033[0m\n\n"



################## VARIABLES TEMPORALES ######
#

inf3=$(mktemp)

##################

f4=$(mktemp)

#
################## VARIABLES TEMPORALES ######






yt-dlp --part --username="$user2" --password="$pass2" --legacy-server-connect --print-to-file "after_move:filepath" "$f4" --no-keep-video -o "%(title)s [YTERMUX-V2].%(ext)s" --print-to-file "%(title)s" "$inf3" -P "/data/data/com.termux/files/home/storage/downloads" -f $i1+$i2 --no-mtime --no-warnings --merge-output-format mp4 --output-na-placeholder "[Dato indeterminado]" --embed-subs $uvd





















file_scanner4=$(cat $f4)




infv3=$(cat $inf3)










if [[ -f "${file_scanner4}" ]]
then










############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#


f4_4=$(cat $f4)


#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################




############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#




read fd4 _ < <(ffmpeg -i "$f4_4" |& awk '/Duration:/ {print $2}')

vtd4=$(mktemp)

echo "$fd4" > "$vtd4"

read fileduracion4 _ < <(sed -e 's/\,//g' "$vtd4")





#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############






################## TAMAÑO DE FICHERO ##################
#
#
#






read filesize4 _ < <(du -h "$f4_4")






#
#
#
################# TAMAÑO DE FICHERO ####################
















#=============>>>>>>>>>>>>>











echo -e "\n\n\n\033[1;37mm[Descarga exitosa | DUO-STREAMING-CUENTA]\033[0m\n\n\n"











echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | DUO-STREAMING-CUENTA\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv3]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp4]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize4]\n"


echo -e "\n\033[1;37m[☣] Tiempo de descarga:\033[0m  [$fileduracion4]\n"


dfdload3=$(date +%c)
echo -e "\n\033[1;37m[☣] Fecha de descarga:\033[0m   [$dfdload3]\n"


dDload3=$(date -u -d @$(($(date +%s) - $dtime3)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload3]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Exitosa]\n"






































unset -v inf3
unset -v f4
unset -v vtd4








echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | DUO-STREAMING-CUENTA]\033[0m\n\n\n"












echo -e "\e[1;37m               ________   _________  ______   _______  __________   ______     \e[0m"
echo -e "\e[1;37m              / _______ \ | _____  \ |__ __| / ______\ |____ ____| / ___  \    \e[0m"
echo -e "\e[1;37m              | |     |_| | |___/  /   | |   | |_____      | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |      __ |  ___  /    | |   \_____  \     | |     | |  | |    \e[0m"
echo -e "\e[1;37m              | |_____| | |  |  \  \ __| |__  _____| |     | |     | |__| |    \e[0m"
echo -e "\e[1;37m               \________| |__|   \__\|_____| |_______/     |_|     \______/    \e[0m"
echo -e ""
echo -e ""




echo -e "\e[1;37m                     __       ___ ________  ______  ___    __  _______          \e[0m"
echo -e "\e[1;37m                     \ \     /  / |__  __| | _____| |   \  | | | _____|         \e[0m"
echo -e "\e[1;37m                      \ \   /  /    | |    | |____  | |\ \ | | | |____          \e[0m"
echo -e "\e[1;37m                       \ \ /  /     | |    | _____| | | \ \| | | _____|         \e[0m"
echo -e "\e[1;37m                        \ V  /    __| |__  | |____  | |  \   | | |____          \e[0m"
echo -e "\e[1;37m                         \__/     |______| |______| |_|   \__| |______|         \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m             ________   ________    _______  __    __  __________   _______   \e[0m"
echo -e "\e[1;37m             | ______ \  | _____ \  / _____ \ | \   | | |___  ____| /  ____ \  \e[0m"
echo -e "\e[1;37m             | |_____) | | |___/  | | |   | | |  \  | |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             |  _____ /  | ___  _/  | |   | | | |\ \| |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |  \ \   | |   | | | | \   |     | |     | |   | |  \e[0m"
echo -e "\e[1;37m             | |         | |   \ \  | |___| | | |  \  |     | |     | |___| |  \e[0m"
echo -e "\e[1;37m             |_|         |_|    \_\ \_______/ |_|   \_|     |_|     \_______/  \e[0m"
echo -e ""
echo -e ""
echo -e ""
echo -e "\e[1;37m                  _____    _____  _____________   ________        ____        \e[0m"
echo -e "\e[1;37m                  |_    \  /   _| |  ___  ___  |  /  ____  \     / _   |       \e[0m"
echo -e "\e[1;37m                    | |\ \/ /| |  |_|  | |   |_|  |_|   / /     / /  | |       \e[0m"
echo -e "\e[1;37m                    | | \  / | |       | |             / /     / /   | |       \e[0m"
echo -e "\e[1;37m                    | |  \/  | |       | |            / /     / /____| |__     \e[0m"
echo -e "\e[1;37m                    | |      | |       | |           / /     /______   ___|   \e[0m"
echo -e "\e[1;37m                   _| |_    _| |_    __| |__        / /______      _|  |__    \e[0m"
echo -e "\e[1;37m                   |___|    |___|    |_____|       |_________|    |______|    \e[0m"
echo -e ""
echo -e ""











exit




else

echo -e "\n\n\n\033[1;37m[Descarga fallida | DUO-STREAMING-CUENTA]\033[0m\n\n\n"

dfdload3=$(date +%c)


echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | DUO-STREAMING-CUENTA\033[0m\n\n"


  echo -e "\033[1;37m[☣] Fecha de ejecución:\033[0m  [$dfdload3]\n"

echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [Fallida]\n"


dDload3=$(date -u -d @$(($(date +%s) - $dtime3)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload3]\n\n\n"




echo -e "\033[1;37m[Saliendo de YTERMUX]\033[0m\n\n"


unset -v inf3
unset -v f4
unset -v vtd4

exit


fi








;;

5)

echo ""



;;


6)

echo -e "\033[1;37m\n\n\n[Saliendo de YTERMUX]\033[0m\n"
sleep 1

exit
# Salida


;;


*) echo -e "\n\n\n\033[1;37m[\033[0m\033[2;33m INF/ERROR\033[0m \033[0;37m|\033[0m INGRESO INCORRECTO REINTENTE NUEVAMENTE \033[1;37m]\033[0m"
sleep 1
# Ingreso incorrecto reintente nuevamente.

;;


esac


break


done


}









function q3 {


echo -e "\033[1;37m\n\n\n[Saliendo de YTERMUX]\033[0m\n"
sleep 1
# Salida



exit


}









end_script=0
while [[ "${end_script}" != 1 ]];do
    mytermx
    case ${q} in
    1)
       q1
    ;;
       
    2)
       q2
    ;;
     
    3) 
       q3
    ;;

    *) echo -e "\n\n\n\033[1;37m[\033[0m\033[2;33m INF/ERROR\033[0m \033[0;37m|\033[0m INGRESO INCORRECTO REINTENTE NUEVAMENTE \033[1;37m]\033[0m"

sleep 1


# Ingreso incorrecto reintente nuevamente.




      # if [[ -z ${q} ]]
       #then



       #echo "
       #echo "
       #echo -e "\033[0;666;32m[PROCESANDO/INFORME]\033[0m
       #echo "
       #sleep 1
       #echo -e "\033[0;666;32m[\033[0m\033[0;666;32mDEBUG\033[0m\033[0;666;32m]\033[0m Digitación invalida
       #sleep 1
       #echo -e "\n\033[0;666;32m[\033[0m\033[0;666;32mDEBUG\033[0m\033[0;666;32m]\033[0m Saliendo de YTDLP-TERMUX-V2\n



       #sleep 1
       #exit
       #fi
    ;;
    
    esac
done



code_cif64
source ${ytermux}
unset -v ytermux
