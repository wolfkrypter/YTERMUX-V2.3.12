



















#!/bin/bash


########################
# INFORMACIÓN SUB-WARE #
########################
#                      #
#  Author: Wolkrypter  #
#  S-ware: YTERMUX-V2  #
#  TPL:    Bash$cript  #
#  D-up:   12/03/2025  #
#  D-md:   11/07/2025  #
#  H-md:   08:11       #
########################








function mytermx {



clear
echo -e "\n"








echo -e "\033[1;99;37m==================================================================================\033[0m"
echo -e "\033[1;99;37m   ____  _____   _________   _______   ______    __      __  __    __ __      __  \033[0m"
echo -e "\033[1;99;37m  |_  _| |_  _| | __   _  | | ____  | | ____ \  |  \    /  | | |  | | \ \    / /  \033[0m"
echo -e "\033[1;99;37m    \ \   / /   |_| | | |_| | |   |_| | |   \ \ |   \  /   | | |  | |  \ \  / /   \033[0m"
echo -e "\033[1;99;37m     \ \ / /        | |     | |___    | |___/ / |  \ \/ /| | | |  | |   \ \/ /    \033[0m"
echo -e "\033[1;99;37m      \   /         | |     |  ___|   |      /  |  |\  / | | | |  | |    \  /     \033[0m"
echo -e "\033[1;99;37m       |  |         | |     | |   __  |  |\  \  |  | \/  | | | |  | |   / /\ \    \033[0m"
echo -e "\033[1;99;37m      _|  |_       _| |_    | |___| | |  | \  \ |  |     | | | |__| |  / /  \ \   \033[0m"
echo -e "\033[1;99;37m      |_____|     |_____|   |_______| |__|  \__\|__|     |_|  \_____/ /_/    \_\  \033[0m"
echo -e ""

echo -e "\033[1;37m==================================================================================\033[0m"


echo -e "\033[1;37m[☣] Shell-Script:\033[0m https://github.com/wolfkrypter/YTERMUX-V2.3.12"
echo -e "\033[1;37m[☣] Author:\033[0m Wolfkrypter"
echo -e "\033[1;37m==================================================================================\033[0m"

echo ""
echo -e "\033[1;37m[☣] Conectividad: Virtual private network(Excepto para YouTube) | [ETC]\033[0m\n"
echo -e "\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z | OPCIÓN 3\033[0m\n\n"




echo -e "\033[1;37m[1]\033[0m Extracodificación de audio streaming\n"




echo -e "\033[1;37m[2]\033[0m Extracodificación audiovisual streaming\n"



echo -e "\033[1;37m[3]\033[0m Salir\n"




read -p "[☣] Digite selección: " -e q


}









function q1 {






while true;

do


echo -e "\n\n\n\033[1;37m[☣] MODULO DE EXTRACODIFICACIÓN DE AUDIO STREAMING\033[0m"

echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z | OPCIÓN 5\033[0m\n\n"



echo -e "\033[1;37m[1]\033[0m audio-url-streaming\n"


echo -e "\033[1;37m[2]\033[0m audio-url-streaming-playlist\n"




echo -e "\033[1;37m[3]\033[0m audio-ytsearch\n"



echo -e "\033[1;37m[4]\033[0m menú principal\n"


echo -e "\033[1;37m[5]\033[0m salir\n"




read -p "[☣] Digite selección: " -e md3










############ Sentencia case - audio streaming #########
#
#
#



case $md3 in






############ MODULO DE EXTRACODIFICACIÓN URL-AUDIO ##############
#
#





1)






# SECCIÓN 1

echo -e "\n\n\n\033[1;37m[☣] SUB-MODULO DE EXTRACODIFICACIÓN DE AUDIO-URL-STREAMING\033[0m"

echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"
echo -e "\033[1;37mPlataformas:\033[0m \033[0;47;30m You\033[0m\033[0;41;37mTube \033[0m \033[0;37m|\033[0m \033[0;44;37m Facebook™ \033[0m \033[0;37m|\033[0m \033[0;46;37m Vimeo \033[0m \033[0;37m|\033[0m \033[0;37m[\033[0m\033[0;37mETC\033[0m\033[0;37m]\033[0m"






echo -e "\n\n\033[1;37mEjemplo de URL:\033[0m https://m.youtube.com/watch?v=w-o3jDYo8ew\n\n\n"






############ Entrada de URL #########
#
#
#



read -p "[☣] Digite URL: " -e u



#
#
#
############ Entrada de URL #########



############ Verificación de caracteres null - Entrada de URL #########
#
#
#




if [[ -z ${u} ]]
then



echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX-V2.3.12\n\n\n"



unset -v inf1
unset -v f1
unset -v vtd1




sleep 1
exit
fi



#
#
#
############ Verificación de caracteres null - Entrada de URL #########





############## Selección de calidad AUDIO-URL ######################
#
#
#



echo ""
echo ""
echo ""
echo -e "[☣] Selección de Calidad"
echo ""
echo ""
echo -e "[☣] Salir/cancelar: CTRL+C | CTRL+Z | OPCIÓN 7\n\n"


echo -e "[1] 128Kb\n"

echo -e "[2] 141Kb\n"

echo -e "[3] 192Kb\n"

echo -e "[4] 239Kb\n"

echo -e "[5] 320Kb\n"

echo -e "[6] menú principal\n"

echo -e "[7] salir\n"

read -p "[☣] Digite selección: " -e smd1




#
#
#
############## Selección de calidad AUDIO-URL ######################






############ Verificación de caracteres null - Entrada de Selección calidad #########
#
#
#


if [[ -z ${smd1} ]]
then



echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX-V2.3.12\n\n\n"



unset -v inf1
unset -v f1
unset -v vtd1




sleep 1
exit
fi



#
#
#
############ Verificación de caracteres null - Entrada de Selección calidad #########


















case $smd1 in 





############################## Calidad 63Kb ###################
#
#


1)



# Calidad 128Kb





############ Variable de tiempo de ejecución ###########
#
#




dtime1=$(date +%s)



#
#
############ Variable de tiempo de ejecución ###########





############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########




########################## EJECUCIÓN DE YT-DLP #########################
#
#



echo -e "\n\033[1;37m\n\n[Inicializando descarga | AUDIO-URL-STREAMING]\033[0m\n\n"



############ Declaración de variables temporales ##############
#
#







############ Variable Filename ###########
#
#



inf1=$(mktemp)
 




#
#
############ Variable Filename ###########






############ Variable filepath ###########
#
#




f1=$(mktemp)




#
#
############ Variable filepath ###########





#
#
############ Declaración de variables temporales ##############






############ EJECUCIÓN DE COMANDO YT-DLP #####################
#
#













yt-dlp --embed-metadata --no-playlist --no-abort-on-error --ignore-errors --force-overwrites --embed-thumbnail --print-to-file "after_move:filepath" "$f1" --output-na-placeholder "unknown" --no-keep-video -P "/data/data/com.termux/files/home/storage/downloads" --no-mtime --no-warnings -o "%(title).226B [128Kb][YTERMUX-V2.3.12].%(ext)s" --print-to-file "%(title).56B..." "$inf1" --extract-audio --audio-format mp3 --audio-quality 128k $u


#
#
############ EJECUCIÓN DE COMANDO YT-DLP #####################


########################## Conversión de variables temporales #########################
#
#





############# Variable filepath ###########
#
#

file_scanner1=$(cat $f1)



#
#
############ Variable filepath ###########







############ Variable Filename ###########
#
#


infv1=$(cat $inf1)



#
#
############ Variable Filename ###########





#
#
########################## Conversión de variables temporales #########################





############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############
#
#



if [[ -f "${file_scanner1}" ]]
then









############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#

f1_1=$(cat $f1)

#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################







############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#





read fd1 _ < <(ffmpeg -i "$f1_1" |& awk '/Duration:/ {print $2}')

vtd1=$(mktemp)

echo "$fd1" > "$vtd1"


read fileduracion1 _ < <(sed -e 's/\,//g' "$vtd1")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize1 _ < <(du -h "$f1_1")




#
#
#
################# TAMAÑO DE FICHERO ####################











echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-URL-STREAMING]\033[0m"












echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv1]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"













echo -e "\n\033[1;37m[☣] Duracion de archivo:\033[0m [$fileduracion1]\n"




echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize1]\n"




echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [128Kb]\n"




echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"




echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"















echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"







fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"











############ Variable de tiempo de ejecución final - Descarga exitosa ###########
#
#



dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)



#
#
############ Variable de tiempo de ejecución final - Descarga exitosa ###########






echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"


echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [url]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"


# ED1






############ Eliminación de variables ###########
#
#




unset -v inf1
unset -v f1
unset -v vtd1




#
#
############ Eliminación de variables ###########



echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-URL-STREAMING]\033[0m\n\n\n"
















exit





else


echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING]\033[0m\n"








echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING\033[0m\n\n"




echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [128Kb]\n"








echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"








echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"









fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"













############ Variable de tiempo de ejecución final - Descarga Fallida ###########
#
#




dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)




#
#
############ Variable de tiempo de ejecución final - Descarga Fallida ###########


echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"












#  DESCARGA EXITOSA
#
#  ✓ Duración de archivo
#  ✓ Tamaño de descarga
#  ✓ Calidad de descarga
#  ✓ Formato de descarga
#  ✓ Tipo de Descarga
#
#  DESCARGA FALLIDA
#
#  ✓ Formato de descarga
#  ✓ Calidad de descarga
#  ✓ Tipo de descarga
#
































echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"





echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [url]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"




echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"






############ Ekiminación de variables ###########
#
#




unset -v inf1
unset -v f1
unset -v vtd1




#
#
############ Ekiminación de variables ###########










exit







fi


#
#
#
############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############




#
#
########################## EJECUCIÓN DE YT-DLP #########################






;;







2)



# Calidad 141Kb









############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########











dtime1=$(date +%s)





echo -e "\n\033[1;37m\n\n[Inicializando descarga | AUDIO-URL-STREAMING]\033[0m\n\n"



############ VARIABLES TEMPORALES ##############
#
#


inf1=$(mktemp)
 

######################


f1=$(mktemp)


#
#
############ VARIABLES TEMPORALES ##############








############ EJECUCIÓN DE COMANDO YT-DLP #####################
#
#



yt-dlp --embed-metadata --no-playlist --no-abort-on-error --ignore-errors --force-overwrites --embed-thumbnail --print-to-file "after_move:filepath" "$f1" --output-na-placeholder "unknown" --no-keep-video -P "/data/data/com.termux/files/home/storage/downloads" --no-mtime --no-warnings -o "%(title).226B [141Kb][YTERMUX-V2.3.12].%(ext)s" --print-to-file "%(title).56B..." "$inf1" --extract-audio --audio-format mp3 --audio-quality 141k $u


#
#
############ EJECUCIÓN DE COMANDO YT-DLP #####################






file_scanner1=$(cat $f1)





infv1=$(cat $inf1)






############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############
#
#



if [[ -f "${file_scanner1}" ]]
then









############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#


f1_1=$(cat $f1)


#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################







############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#





read fd1 _ < <(ffmpeg -i "$f1_1" |& awk '/Duration:/ {print $2}')

vtd1=$(mktemp)

echo "$fd1" > "$vtd1"


read fileduracion1 _ < <(sed -e 's/\,//g' "$vtd1")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize1 _ < <(du -h "$f1_1")






#
#
#
################# TAMAÑO DE FICHERO ####################











echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-URL-STREAMING]\033[0m"











echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv1]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"















#  DESCARGA EXITOSA
#
#  ✓ Duración de archivo
#  ✓ Tamaño de descarga
#  ✓ Calidad de descarga
#  ✓ Formato de descarga
#  ✓ Tipo de Descarga




echo -e "\n\033[1;37m[☣] Duracion de archivo:\033[0m [$fileduracion1]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize1]\n"



echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [141Kb]\n"



echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"



echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"



















echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"









fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"











dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"







echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [url]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"









unset -v inf1
unset -v f1
unset -v vtd1





echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-URL-STREAMING]\033[0m\n\n\n"

















exit





else


echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING]\033[0m\n"






echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING\033[0m\n\n"












echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [141Kb]\n"






echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"













echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"




echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"






fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"








dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"















echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"








echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [url]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"



echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"

unset -v inf1
unset -v f1
unset -v vtd1



exit



fi


#
#
#
############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############








;;


3)


# Calidad 192Kb










dtime1=$(date +%s)












############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########







echo -e "\n\033[1;37m\n\n[Inicializando descarga | AUDIO-URL-STREAMING]\033[0m\n\n"



############ VARIABLES TEMPORALES ##############
#
#


inf1=$(mktemp)
 

######################


f1=$(mktemp)


#
#
############ VARIABLES TEMPORALES ##############








############ EJECUCIÓN DE COMANDO YT-DLP #####################
#
#



yt-dlp --embed-metadata --no-playlist --no-abort-on-error --ignore-errors --force-overwrites --embed-thumbnail --print-to-file "after_move:filepath" "$f1" --output-na-placeholder "unknown" --no-keep-video -P "/data/data/com.termux/files/home/storage/downloads" --no-mtime --no-warnings -o "%(title).226B [192Kb][YTERMUX-V2.3.12].%(ext)s" --print-to-file "%(title).56B..." "$inf1" --extract-audio --audio-format mp3 --audio-quality 192k $u


#
#
############ EJECUCIÓN DE COMANDO YT-DLP #####################






file_scanner1=$(cat $f1)





infv1=$(cat $inf1)






############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############
#
#



if [[ -f "${file_scanner1}" ]]
then









############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#


f1_1=$(cat $f1)


#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################







############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#





read fd1 _ < <(ffmpeg -i "$f1_1" |& awk '/Duration:/ {print $2}')

vtd1=$(mktemp)

echo "$fd1" > "$vtd1"


read fileduracion1 _ < <(sed -e 's/\,//g' "$vtd1")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize1 _ < <(du -h "$f1_1")






#
#
#
################# TAMAÑO DE FICHERO ####################











echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-URL-STREAMING]\033[0m"











echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv1]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"
















#  DESCARGA EXITOSA
#
#  ✓ Duración de archivo
#  ✓ Tamaño de descarga
#  ✓ Calidad de descarga
#  ✓ Formato de descarga
#  ✓ Tipo de Descarga









echo -e "\n\033[1;37m[☣] Duracion de archivo:\033[0m [$fileduracion1]\n"



echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize1]\n"



echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [192Kb]\n"



echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"



echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"
















echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"







fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"















dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"






echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"






echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [url]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"







unset -v inf1
unset -v f1
unset -v vtd1





echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-URL-STREAMING]\033[0m\n\n\n"













exit





else


echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING]\033[0m\n"







echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING\033[0m\n\n"








echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [192Kb]\n"




echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"





echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"








fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"










dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"




echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"




echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [url]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"







echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"

unset -v inf1
unset -v f1
unset -v vtd1



exit



fi


#
#
#
############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############



;;










4)

# Calidad 239Kb

dtime1=$(date +%s)


















############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########















echo -e "\n\033[1;37m\n\n[Inicializando descarga | AUDIO-URL-STREAMING]\033[0m\n\n"



############ VARIABLES TEMPORALES ##############
#
#


inf1=$(mktemp)
 

######################


f1=$(mktemp)


#
#
############ VARIABLES TEMPORALES ##############








############ EJECUCIÓN DE COMANDO YT-DLP #####################
#
#



yt-dlp --embed-metadata --no-playlist --no-abort-on-error --ignore-errors --force-overwrites --embed-thumbnail --print-to-file "after_move:filepath" "$f1" --output-na-placeholder "unknown" --no-keep-video -P "/data/data/com.termux/files/home/storage/downloads" --no-mtime --no-warnings -o "%(title).226B [239Kb][YTERMUX-V2.3.12].%(ext)s" --print-to-file "%(title).56B..." "$inf1" --extract-audio --audio-format mp3 --audio-quality 239k $u


#
#
############ EJECUCIÓN DE COMANDO YT-DLP #####################






file_scanner1=$(cat $f1)





infv1=$(cat $inf1)






############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############
#
#



if [[ -f "${file_scanner1}" ]]
then









############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#


f1_1=$(cat $f1)


#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################







############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#





read fd1 _ < <(ffmpeg -i "$f1_1" |& awk '/Duration:/ {print $2}')

vtd1=$(mktemp)

echo "$fd1" > "$vtd1"


read fileduracion1 _ < <(sed -e 's/\,//g' "$vtd1")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize1 _ < <(du -h "$f1_1")






#
#
#
################# TAMAÑO DE FICHERO ####################











echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-URL-STREAMING]\033[0m"











echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv1]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"







#  DESCARGA EXITOSA
#
#  ✓ Duración de archivo
#  ✓ Tamaño de descarga
#  ✓ Calidad de descarga
#  ✓ Formato de descarga
#  ✓ Tipo de Descarga



echo -e "\n\033[1;37m[☣] Duracion de archivo:\033[0m [$fileduracion1]\n"



echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize1]\n"



echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [239Kb]\n"



echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"



echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"



















echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"









fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"









dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"



echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [url]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"










unset -v inf1
unset -v f1
unset -v vtd1





echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-URL-STREAMING]\033[0m\n\n\n"























exit





else


echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING]\033[0m\n"






echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING\033[0m\n\n"




echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [239Kb]\n"





echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"






echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"














dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"



echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"





echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [url]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"






echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"

unset -v inf1
unset -v f1
unset -v vtd1



exit



fi


#
#
#
############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############






;;



5) 


# Calidad 320Kb




dtime1=$(date +%s)















############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########















echo -e "\n\033[1;37m\n\n[Inicializando descarga | AUDIO-URL-STREAMING]\033[0m\n\n"



############ VARIABLES TEMPORALES ##############
#
#


inf1=$(mktemp)
 

######################


f1=$(mktemp)


#
#
############ VARIABLES TEMPORALES ##############








############ EJECUCIÓN DE COMANDO YT-DLP #####################
#
#



yt-dlp --embed-metadata --no-playlist --no-abort-on-error --ignore-errors --force-overwrites --embed-thumbnail --print-to-file "after_move:filepath" "$f1" --output-na-placeholder "unknown" --no-keep-video -P "/data/data/com.termux/files/home/storage/downloads" --no-mtime --no-warnings -o "%(title).226B [320Kb][YTERMUX-V2.3.12].%(ext)s" --print-to-file "%(title).56B..." "$inf1" --extract-audio --audio-format mp3 --audio-quality 320k $u


#
#
############ EJECUCIÓN DE COMANDO YT-DLP #####################






file_scanner1=$(cat $f1)





infv1=$(cat $inf1)






############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############
#
#


if [[ -f "${file_scanner1}" ]]
then









############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#


f1_1=$(cat $f1)


#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################







############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#





read fd1 _ < <(ffmpeg -i "$f1_1" |& awk '/Duration:/ {print $2}')

vtd1=$(mktemp)

echo "$fd1" > "$vtd1"


read fileduracion1 _ < <(sed -e 's/\,//g' "$vtd1")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize1 _ < <(du -h "$f1_1")






#
#
#
################# TAMAÑO DE FICHERO ####################











echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-URL-STREAMING]\033[0m"











echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv1]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"








#  DESCARGA EXITOSA
#
#  ✓ Duración de archivo
#  ✓ Tamaño de descarga
#  ✓ Calidad de descarga
#  ✓ Formato de descarga
#  ✓ Tipo de Descarga





echo -e "\n\033[1;37m[☣] Duracion de archivo:\033[0m [$fileduracion1]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize1]\n"


echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [320Kb]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"

























echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"














dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"



echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"





echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [url]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"






unset -v inf1
unset -v f1
unset -v vtd1





echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-URL-STREAMING]\033[0m\n\n\n"





















exit





else


echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING]\033[0m\n"



echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING\033[0m\n\n"


echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [320Kb]\n"

echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"












echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"












dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"






echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"






echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [url]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"



echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"

unset -v inf1
unset -v f1
unset -v vtd1



exit



fi


#
#
#
############ SENTENCIA DE VERIFICACIÓN DE FICHERO MOD-URL ##############








;;





6)


echo ""


;;



7) 



echo -e "\033[1;37m\n\n\n[Saliendo de YTERMUX-V2.3.12]\033[0m\n"
sleep 1

exit
# Salida


;;





*) echo -e "\n\n\n\033[1;37m[\033[0m\033[2;33m INF/ERROR\033[0m \033[0;37m|\033[0m INGRESO INCORRECTO REINTENTE NUEVAMENTE \033[1;37m]\033[0m"

sleep 1
;;




esac










;;











#####################################################################################################################














############ MODULO DE EXTRACODIFICACIÓN YTSEARCH-AUDIO ##############
#
#





2)
















############ MODULO DE EXTRACODIFICACIÓN URL-AUDIO ##############
#
#











# SECCIÓN 1

echo -e "\n\n\n\033[1;37m[☣] SUB-MODULO DE EXTRACODIFICACIÓN DE AUDIO-URL-STREAMING-PLAYLIST\033[0m"

echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"
echo -e "\033[1;37mPlataformas:\033[0m \033[0;47;30m You\033[0m\033[0;41;37mTube \033[0m \033[0;37m|\033[0m \033[0;44;37m Facebook™ \033[0m \033[0;37m|\033[0m \033[0;46;37m Vimeo \033[0m \033[0;37m|\033[0m \033[0;37m[\033[0m\033[0;37mETC\033[0m\033[0;37m]\033[0m"






echo -e "\n\n\033[1;37mEjemplo de URL:\033[0m https://m.youtube.com/playlist?list=PLkR5Ag9BRlIC-V5TS_jfXx1y5Aaz-z-iv&&AUDIO-URL-PLAYLIST\n\n\n"






############ Entrada de URL #########
#
#
#



read -p "[☣] Digite URL: " -e u



#
#
#
############ Entrada de URL #########



############ Verificación de caracteres null - Entrada de URL #########
#
#
#




if [[ -z ${u} ]]
then



echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX-V2.3.12\n\n\n"



unset -v inf1
unset -v f1
unset -v vtd1




sleep 1
exit
fi



#
#
#
############ Verificación de caracteres null - Entrada de URL #########





############## Selección de calidad AUDIO-URL ######################
#
#
#



echo ""
echo ""
echo ""
echo -e "[☣] Selección de Calidad"
echo ""
echo ""
echo -e "[☣] Salir/cancelar: CTRL+C | CTRL+Z | OPCIÓN 7\n\n"

echo -e "[1] 128Kb\n"

echo -e "[2] 141Kb\n"

echo -e "[3] 192Kb\n"

echo -e "[4] 239Kb\n"

echo -e "[5] 320Kb\n"

echo -e "[6] menú principal\n"

echo -e "[7] salir\n"

read -p "[☣] Digite selección: " -e smd1




#
#
#
############## Selección de calidad AUDIO-URL ######################






############ Verificación de caracteres null - Entrada de Selección calidad #########
#
#
#


if [[ -z ${smd1} ]]
then



echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX-V2.3.12\n\n\n"



unset -v inf1
unset -v f1
unset -v vtd1




sleep 1
exit
fi



#
#
#
############ Verificación de caracteres null - Entrada de Selección calidad #########


















case $smd1 in 





############################## Calidad 63Kb ###################
#
#


1)



# Calidad 128Kb







############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########
















dtime1=$(date +%s)


fpv1=$(mktemp)




echo -e "\n\033[1;37m\n\n[Inicializando descarga | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n\n"








############ EJECUCIÓN DE COMANDO YT-DLP #####################
#
#


yt-dlp --restrict-filenames --embed-metadata --yes-playlist --no-abort-on-error --ignore-errors --force-overwrites --embed-thumbnail --no-keep-video -P "/data/data/com.termux/files/home/storage/downloads" --no-mtime --no-warnings -o "%(title).226B_[128Kb][YTERMUX-V2.3.12].%(ext)s" --extract-audio --audio-format mp3 --audio-quality 128k --print-to-file "after_move:filepath" "$fpv1" $u


#
#
############ EJECUCIÓN DE COMANDO YT-DLP #####################




fpv1_1=$(cat $fpv1)


fpv1_1_1=$(echo "$fpv1_1")




################ Verificador playlist #################
#
#
#






for file_path1 in $fpv1_1_1


 do



  if [ -f "$file_path1" ]



then







echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-URL-STREAMING-PLAYLIST]\033[0m"











echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"



echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"











echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [128Kb]\n"







echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"




echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"













echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"












dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"







echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"








echo -e "\033[1;37m\n\n[Finalizo descarga | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n\n\n"











unset -v fpv1
unset -v fpv1_1
unset -v fpv1_1_1
unset -v file_path1


exit

break

else


echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n"








echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"










echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [128Kb]\n"

echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"



echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"







echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"


























dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"






echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"









echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"



echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"




unset -v fpv1
unset -v fpv1_1
unset -v fpv1_1_1
unset -v file_path1



exit



break


fi


done





echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n"



echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"






echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [128Kb]\n"



echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"



echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"













echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"













dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"




echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"





echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"




echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"









unset -v fpv1
unset -v fpv1_1
unset -v fpv1_1_1
unset -v file_path1

exit



break




#
#
#
################ Verificador playlist #################



















;;







2)



# Calidad 141Kb







############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########










dtime1=$(date +%s)


fpv2=$(mktemp)







echo -e "\n\033[1;37m\n\n[Inicializando descarga | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n\n"





############ EJECUCIÓN DE COMANDO YT-DLP #####################
#
#


yt-dlp --restrict-filenames --print-to-file "after_move:filepath" "$fpv2" --embed-metadata --yes-playlist --no-abort-on-error --ignore-errors --continue --embed-thumbnail --no-keep-video -P "/data/data/com.termux/files/home/storage/downloads" --no-mtime --no-warnings -o "%(title).226B_[141Kb][YTERMUX-V2.3.12].%(ext)s" --extract-audio --audio-format mp3 --audio-quality 141k $u


#
#
############ EJECUCIÓN DE COMANDO YT-DLP #####################









fpv2_2=$(cat $fpv2)


fpv2_2_2=$(echo "$fpv2_2")



















################ Verificador playlist #################
#
#
#




for file_path2 in $fpv2_2_2; do



  if [ -f "$file_path2" ]; then







echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-URL-STREAMING-PLAYLIST]\033[0m"











echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"








echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"






echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [141Kb]\n"






echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"







echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"








echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"
















dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"




echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"







echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"





unset -v fpv2
unset -v fpv2_2
unset -v fpv2_2_2
unset -v file_path2












echo -e "\033[1;37m\n\n[Finalizo descarga | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n\n\n"




exit


break




else








echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n"







echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"





echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [141Kb]\n"



echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"




echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"










echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"









dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"




echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"








echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"




echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"




unset -v fpv2
unset -v fpv2_2
unset -v fpv2_2_2
unset -v file_path2



exit




break





fi
done




#
#
#
################ Verificador playlist #################









echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n"



echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"












echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [141Kb]\n"



echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"





echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"













echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"

















dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"









echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"



echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"




echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"




unset -v fpv2
unset -v fpv2_2
unset -v fpv2_2_2
unset -v file_path2


exit


break




;;


3)


# Calidad 192Kb






dtime1=$(date +%s)


fpv3=$(mktemp)










############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########














echo -e "\n\033[1;37m\n\n[Inicializando descarga | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n\n"





############ EJECUCIÓN DE COMANDO YT-DLP #####################
#
#


yt-dlp --restrict-filenames --print-to-file "after_move:filepath" "$fvp3" --embed-metadata --yes-playlist --no-abort-on-error --ignore-errors --continue --embed-thumbnail --no-keep-video -P "/data/data/com.termux/files/home/storage/downloads" --no-mtime --no-warnings -o "%(title).226B_[192Kb][YTERMUX-V2.3.12].%(ext)s" --extract-audio --audio-format mp3 --audio-quality 192k $u


#
#
############ EJECUCIÓN DE COMANDO YT-DLP #####################




fpv3_3=$(cat $fpv3)


fpv3_3_3=$(echo "$fpv3_3")



################ Verificador playlist #################
#
#
#




for file_path3 in $fpv3_3_3; do



  if [ -f "$file_path3" ]; then







echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-URL-STREAMING-PLAYLIST]\033[0m"











echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"









echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"







echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [192Kb]\n"






echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"










echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"






echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"




















dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"






echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"




echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"



unset -v fpv3
unset -v fpv3_3
unset -v fpv3_3_3
unset -v file_path3





echo -e "\033[1;37m\n\n[Finalizo descarga | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n\n\n"


break



exit




else


echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n"


echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"






echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [192Kb]\n"







echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"





echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"













echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"



















dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"






echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"




echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"







echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"




unset -v fpv3
unset -v fpv3_3
unset -v fpv3_3_3
unset -v file_path3



exit




break




fi
done




#
#
#
################ Verificador playlist #################





echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n"



echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"



echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [192Kb]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"




echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"













echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"

















echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"







dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"



echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"


echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"




unset -v fpv3
unset -v fpv3_3
unset -v fpv3_3_3
unset -v file_path3



exit








break





;;










4)

# Calidad 239Kb




dtime1=$(date +%s)


fpv4=$(mktemp)













############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########

















echo -e "\n\033[1;37m\n\n[Inicializando descarga | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n\n"





############ EJECUCIÓN DE COMANDO YT-DLP #####################
#
#


yt-dlp --restrict-filenames --print-to-file "after_move:filepath" "$fpv4" --embed-metadata --yes-playlist --no-abort-on-error --ignore-errors --continue --embed-thumbnail --no-keep-video -P "/data/data/com.termux/files/home/storage/downloads" --no-mtime --no-warnings -o "%(title).226B_[239Kb][YTERMUX-V2.3.12].%(ext)s" --extract-audio --audio-format mp3 --audio-quality 239k $u


#
#
############ EJECUCIÓN DE COMANDO YT-DLP #####################


fpv4_4=$(cat $fpv4)


fpv4_4_4=$(echo "$fpv4_4")









################ Verificador playlist #################
#
#
#




for file_path4 in $fpv4_4_4; do



  if [ -f "$file_path4" ]; then







echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-URL-STREAMING-PLAYLIST]\033[0m"











echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"



echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"





echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [239Kb]\n"




echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"




echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"








echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"




















dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"



echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"




echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"




unset -v fpv4
unset -v fpv4_4
unset -v fpv4_4_4
unset -v file_path4




echo -e "\033[1;37m\n\n[Finalizo descarga | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n\n\n"



exit



break


else


echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n"



echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"








echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [239Kb]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"





echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"







echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"












dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"



echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"



echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"


echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"




unset -v fpv4
unset -v fpv4_4
unset -v fpv4_4_4
unset -v file_path4



exit



break






fi
done




#
#
#
################ Verificador playlist #################





echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n"



echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"








echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [239Kb]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"




echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"







echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"










dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"



echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"



echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"


echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"




unset -v fpv4
unset -v fpv4_4
unset -v fpv4_4_4
unset -v file_path4



exit


break




;;


















5) 


# Calidad 320Kb




dtime1=$(date +%s)


fpv5=$(mktemp)

















############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########

























echo -e "\n\033[1;37m\n\n[Inicializando descarga | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n\n"





############ EJECUCIÓN DE COMANDO YT-DLP #####################
#
#


yt-dlp --restrict-filenames --print-to-file "after_move:filepath" "$fpv5" --embed-metadata --yes-playlist --no-abort-on-error --ignore-errors --continue --embed-thumbnail --no-keep-video -P "/data/data/com.termux/files/home/storage/downloads" --no-mtime --no-warnings -o "%(title).226B_[320Kb][YTERMUX-V2.3.12].%(ext)s" --extract-audio --audio-format mp3 --audio-quality 320k $u


#
#
############ EJECUCIÓN DE COMANDO YT-DLP #####################



fpv5_5=$(cat $fpv5)


fpv5_5_5=$(echo "$fpv5_5")





################ Verificador playlist #################
#
#
#




for file_path5 in $fpv5_5_5; do



  if [ -f "$file_path5" ]; then







echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-URL-STREAMING-PLAYLIST]\033[0m"











echo -e "\n\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"



echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"










echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [320Kb]\n"





echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"









echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"









echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"


















dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"




echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"







echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"









unset -v fpv5
unset -v fpv5_5
unset -v fpv5_5_5
unset -v file_path5











echo -e "\033[1;37m\n\n[Finalizo descarga | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n\n\n"








exit


break



else


echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n"



echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"




echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [320Kb]\n"





echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"





echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"









echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"












dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"




echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"







echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"




unset -v fpv5
unset -v fpv5_5
unset -v fpv5_5_5
unset -v file_path5



exit





break





fi
done




#
#
#
################ Verificador playlist #################



echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-URL-STREAMING-PLAYLIST]\033[0m\n"



echo -e "\n\n\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-URL-STREAMING-PLAYLIST\033[0m\n\n"







echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [320Kb]\n"

echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"



echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"









echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"

















dDload1=$(date -u -d @$(($(date +%s) - $dtime1)) +%T)
echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload1]\n"






echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"





echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [playlist]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"









echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"




unset -v fpv5
unset -v fpv5_5
unset -v fpv5_5_5
unset -v file_path5



exit








break
















;;





6)


echo ""


;;



7) 



echo -e "\033[1;37m\n\n\n[Saliendo de YTERMUX-V2.3.12]\033[0m\n"
sleep 1

exit
# Salida


;;





*) echo -e "\n\n\n\033[1;37m[\033[0m\033[2;33m INF/ERROR\033[0m \033[0;37m|\033[0m INGRESO INCORRECTO REINTENTE NUEVAMENTE \033[1;37m]\033[0m"

sleep 1
;;




esac





;;






















3)


# SECCIÓN 2

echo -e "\n\n\n\033[1;37m[☣] SUB-MODULO DE EXTRACODIFICACIÓN DE AUDIO-YTSEARCH\033[0m"

echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"



echo -e "\033[1;37mPlataforma:\033[0m \033[0;47;30m You\033[0m\033[0;41;37mTube \033[0m"

echo -e "\n\n\033[1;37mEjemplo | Buscar:\033[0m Armas silenciosas - Los Suziox"


echo -e "\n"



read -p "[☣] Buscar: " -e bsc




if [[ -z ${bsc} ]]
 then



echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX-V2.3.12\n\n\n"









unset -v inf4
unset -v f2
unset -v vtd2




sleep 1
exit
fi


echo ""



echo ""
echo ""
echo -e "[☣] Selección calidad"
echo ""
echo ""
echo -e "[☣] Salir/cancelar: CTRL+C | CTRL+Z | OPCIÓN 7\n\n"

echo -e "[1] 128Kb\n"

echo -e "[2] 141Kb\n"

echo -e "[3] 192Kb\n"

echo -e "[4] 239Kb\n"

echo -e "[5] 320Kb\n"

echo -e "[6] menú principal\n"

echo -e "[7] salir\n"

read -p "[☣] Digite selección: " -e smd2




if [[ -z ${smd2} ]]
then



echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX-V2.3.12\n\n\n"



unset -v inf1
unset -v f1
unset -v vtd1




sleep 1
exit
fi



case $smd2 in






1)



# Calidad 128Kb


















############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########














dtime4=$(date +%s)


f2=$(mktemp)

echo -e "\n\n\n\033[1;37m[Inicializando descarga | AUDIO-YTSEARCH]\033[0m\n\n"




inf4=$(mktemp)




yt-dlp ytsearch:"$bsc" --embed-metadata --no-playlist --no-abort-on-error --ignore-errors --force-overwrites --no-keep-video --print-to-file "after_move:filepath" "$f2" -P "/data/data/com.termux/files/home/storage/downloads" -o "%(title).226B [128Kb][YTERMUX-V2.3.12].%(ext)s" --no-mtime --no-warnings --print-to-file "%(title).56B..." "$inf4" --extract-audio --audio-format mp3 --audio-quality 128k --output-na-placeholder "unknown" --embed-thumbnail

















file_scanner2=$(cat $f2)


infv4=$(cat $inf4)








if [[ -f "${file_scanner2}" ]]
then







############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#



f2_2=$(cat $f2)



#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################




############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#




read fd2 _ < <(ffmpeg -i "$f2_2" |& awk '/Duration:/ {print $2}')

vtd2=$(mktemp)

echo "$fd2" > "$vtd2"


read fileduracion2 _ < <(sed -e 's/\,//g' "$vtd2")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize2 _ < <(du -h "$f2_2")




#
#
#
################# TAMAÑO DE FICHERO ####################
















echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-YTSEARCH]\033[0m\n\n\n"











echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-YTSEARCH\033[0m\n\n"


  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv4]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"





#  DESCARGA EXITOSA
#
#  ✓ Duración de archivo
#  ✓ Tamaño de descarga
#  ✓ Calidad de descarga
#  ✓ Formato de descarga
#  ✓ Tipo de Descarga



echo -e "\n\033[1;37m[☣] Duracion de archivo:\033[0m [$fileduracion2]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize2]\n"


echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [128Kb]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"











echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"
















dDload4=$(date -u -d @$(($(date +%s) - $dtime4)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload4]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"









echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [ytsearch]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"










echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-YTSEARCH]\033[0m\n\n\n"



unset -v inf4
unset -v f2
unset -v vtd2



exit



else







echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-YTSEARCH]\033[0m\n\n\n"







echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-YTSEARCH\033[0m\n\n"








echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [128Kb]\n"



echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"



echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"








echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"











dDload4=$(date -u -d @$(($(date +%s) - $dtime4)) +%T)



echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload4]\n"


echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"



echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [ytsearch]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"



echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n\n"



unset -v inf4
unset -v f2
unset -v vtd2

exit




fi


;;
















2)




# Calidad 141Kb



dtime4=$(date +%s)








############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########
















f2=$(mktemp)

echo -e "\n\n\n\033[1;37m[Inicializando descarga | AUDIO-YTSEARCH]\033[0m\n\n"




inf4=$(mktemp)




yt-dlp ytsearch:"$bsc" --embed-metadata --no-playlist --no-abort-on-error --ignore-errors --force-overwrites --no-keep-video --print-to-file "after_move:filepath" "$f2" -P "/data/data/com.termux/files/home/storage/downloads" -o "%(title).226B [141Kb][YTERMUX-V2.3.12].%(ext)s" --no-mtime --no-warnings --print-to-file "%(title).56B..." "$inf4" --extract-audio --audio-format mp3 --audio-quality 141k --output-na-placeholder "unknown" --embed-thumbnail

















file_scanner2=$(cat $f2)


infv4=$(cat $inf4)








if [[ -f "${file_scanner2}" ]]
then







############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#



f2_2=$(cat $f2)



#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################




############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#




read fd2 _ < <(ffmpeg -i "$f2_2" |& awk '/Duration:/ {print $2}')

vtd2=$(mktemp)

echo "$fd2" > "$vtd2"


read fileduracion2 _ < <(sed -e 's/\,//g' "$vtd2")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize2 _ < <(du -h "$f2_2")




#
#
#
################# TAMAÑO DE FICHERO ####################

















echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-YTSEARCH]\033[0m\n\n\n"











echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-YTSEARCH\033[0m\n\n"










  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv4]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"







#  DESCARGA EXITOSA
#
#  ✓ Duración de archivo
#  ✓ Tamaño de descarga
#  ✓ Calidad de descarga
#  ✓ Formato de descarga
#  ✓ Tipo de Descarga




echo -e "\n\033[1;37m[☣] Duracion de archivo:\033[0m [$fileduracion2]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize2]\n"


echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [141Kb]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"















echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"






dDload4=$(date -u -d @$(($(date +%s) - $dtime4)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload4]\n"






echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"





echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [ytsearch]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"






echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-YTSEARCH]\033[0m\n\n\n"



unset -v inf4
unset -v f2
unset -v vtd2
















exit



else







echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-YTSEARCH]\033[0m\n\n\n"




echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-YTSEARCH\033[0m\n\n"







echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [141Kb]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"






echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"







echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"







dDload4=$(date -u -d @$(($(date +%s) - $dtime4)) +%T)



echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload4]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"





echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [ytsearch]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"









echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n\n"



unset -v inf4
unset -v f2
unset -v vtd2

exit




fi
























;;


3)

# Calidad 192Kb









############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########

















dtime4=$(date +%s)


f2=$(mktemp)

echo -e "\n\n\n\033[1;37m[Inicializando descarga | AUDIO-YTSEARCH]\033[0m\n\n"




inf4=$(mktemp)




yt-dlp ytsearch:"$bsc" --embed-metadata --no-playlist --no-abort-on-error --ignore-errors --force-overwrites --no-keep-video --print-to-file "after_move:filepath" "$f2" -P "/data/data/com.termux/files/home/storage/downloads" -o "%(title).226B [192Kb][YTERMUX-V2.3.12].%(ext)s" --no-mtime --no-warnings --print-to-file "%(title).56B..." "$inf4" --extract-audio --audio-format mp3 --audio-quality 192k --output-na-placeholder "unknown" --embed-thumbnail

















file_scanner2=$(cat $f2)


infv4=$(cat $inf4)








if [[ -f "${file_scanner2}" ]]
then







############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#



f2_2=$(cat $f2)



#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################




############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#




read fd2 _ < <(ffmpeg -i "$f2_2" |& awk '/Duration:/ {print $2}')

vtd2=$(mktemp)

echo "$fd2" > "$vtd2"


read fileduracion2 _ < <(sed -e 's/\,//g' "$vtd2")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize2 _ < <(du -h "$f2_2")




#
#
#
################# TAMAÑO DE FICHERO ####################

















echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-YTSEARCH]\033[0m\n\n\n"











echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-YTSEARCH\033[0m\n\n"


  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv4]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"












#  DESCARGA EXITOSA
#
#  ✓ Duración de archivo
#  ✓ Tamaño de descarga
#  ✓ Calidad de descarga
#  ✓ Formato de descarga
#  ✓ Tipo de Descarga



echo -e "\n\033[1;37m[☣] Duracion de archivo:\033[0m [$fileduracion2]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize2]\n"


echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [192Kb]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"









echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"















dDload4=$(date -u -d @$(($(date +%s) - $dtime4)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload4]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"



echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [ytsearch]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"







echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-YTSEARCH]\033[0m\n\n\n"



unset -v inf4
unset -v f2
unset -v vtd2


















exit



else







echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-YTSEARCH]\033[0m\n\n\n"




echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-YTSEARCH\033[0m\n\n"









echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [192Kb]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"












echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"

















dDload4=$(date -u -d @$(($(date +%s) - $dtime4)) +%T)



echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload4]\n"


echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"






echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [ytsearch]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"











echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n\n"



unset -v inf4
unset -v f2
unset -v vtd2

exit




fi






;;

4)

# Calidad 239Kb








############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########













dtime4=$(date +%s)


f2=$(mktemp)

echo -e "\n\n\n\033[1;37m[Inicializando descarga | AUDIO-YTSEARCH]\033[0m\n\n"




inf4=$(mktemp)




yt-dlp ytsearch:"$bsc" --embed-metadata --no-playlist --no-abort-on-error --ignore-errors --force-overwrites --no-keep-video --print-to-file "after_move:filepath" "$f2" -P "/data/data/com.termux/files/home/storage/downloads" -o "%(title).226B [239Kb][YTERMUX-V2.3.12].%(ext)s" --no-mtime --no-warnings --print-to-file "%(title).56B..." "$inf4" --extract-audio --audio-format mp3 --audio-quality 239k --output-na-placeholder "unknown" --embed-thumbnail

















file_scanner2=$(cat $f2)


infv4=$(cat $inf4)








if [[ -f "${file_scanner2}" ]]
then







############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#



f2_2=$(cat $f2)



#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################




############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#




read fd2 _ < <(ffmpeg -i "$f2_2" |& awk '/Duration:/ {print $2}')

vtd2=$(mktemp)

echo "$fd2" > "$vtd2"


read fileduracion2 _ < <(sed -e 's/\,//g' "$vtd2")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize2 _ < <(du -h "$f2_2")




#
#
#
################# TAMAÑO DE FICHERO ####################

















echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-YTSEARCH]\033[0m\n\n\n"











echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-YTSEARCH\033[0m\n\n"


  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv4]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"





#  DESCARGA EXITOSA
#
#  ✓ Duración de archivo
#  ✓ Tamaño de descarga
#  ✓ Calidad de descarga
#  ✓ Formato de descarga
#  ✓ Tipo de Descarga





echo -e "\n\033[1;37m[☣] Duracion de archivo:\033[0m [$fileduracion2]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize2]\n"


echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [239Kb]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [Audio]\n"











echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"













dDload4=$(date -u -d @$(($(date +%s) - $dtime4)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload4]\n"




echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"








echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [ytsearch]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"









echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-YTSEARCH]\033[0m\n\n\n"



unset -v inf4
unset -v f2
unset -v vtd2











exit



else







echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-YTSEARCH]\033[0m\n\n\n"




echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-YTSEARCH\033[0m\n\n"




echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [192Kb]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"




echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"















echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"

















dDload4=$(date -u -d @$(($(date +%s) - $dtime4)) +%T)



echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload4]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"






echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [ytsearch]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"











echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n\n"



unset -v inf4
unset -v f2
unset -v vtd2

exit




fi








;;



5)



# Calidad 320Kb





############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########











dtime4=$(date +%s)


f2=$(mktemp)

echo -e "\n\n\n\033[1;37m[Inicializando descarga | AUDIO-YTSEARCH]\033[0m\n\n"




inf4=$(mktemp)




yt-dlp ytsearch:"$bsc" --embed-metadata --no-playlist --no-abort-on-error --ignore-errors --force-overwrites --no-keep-video --print-to-file "after_move:filepath" "$f2" -P "/data/data/com.termux/files/home/storage/downloads" -o "%(title).226B [320Kb][YTERMUX-V2.3.12].%(ext)s" --no-mtime --no-warnings --print-to-file "%(title).56B..." "$inf4" --extract-audio --audio-format mp3 --audio-quality 320k --output-na-placeholder "unknown" --embed-thumbnail

















file_scanner2=$(cat $f2)


infv4=$(cat $inf4)








if [[ -f "${file_scanner2}" ]]
then







############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#



f2_2=$(cat $f2)



#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################




############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#




read fd2 _ < <(ffmpeg -i "$f2_2" |& awk '/Duration:/ {print $2}')

vtd2=$(mktemp)

echo "$fd2" > "$vtd2"


read fileduracion2 _ < <(sed -e 's/\,//g' "$vtd2")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize2 _ < <(du -h "$f2_2")




#
#
#
################# TAMAÑO DE FICHERO ####################

















echo -e "\n\n\n\033[1;37m[Descarga exitosa | AUDIO-YTSEARCH]\033[0m\n\n\n"











echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-YTSEARCH\033[0m\n\n"


  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv4]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"





#  DESCARGA EXITOSA
#
#  ✓ Duración de archivo
#  ✓ Tamaño de descarga
#  ✓ Calidad de descarga
#  ✓ Formato de descarga
#  ✓ Tipo de Descarga




echo -e "\n\033[1;37m[☣] Duracion de archivo:\033[0m [$fileduracion2]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize2]\n"


echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [320Kb]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"














echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"









dDload4=$(date -u -d @$(($(date +%s) - $dtime4)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload4]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"








echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [ytsearch]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n"







echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | AUDIO-YTSEARCH]\033[0m\n\n\n"



unset -v inf4
unset -v f2
unset -v vtd2











exit



else







echo -e "\n\n\n\033[1;37m[Descarga fallida | AUDIO-YTSEARCH]\033[0m\n\n\n"




echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | AUDIO-YTSEARCH\033[0m\n\n"







echo -e "\n\033[1;37m[☣] Calidad de descarga:\033[0m [320Kb]\n"




echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [mp3]\n"




echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [audio]\n"













echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"










dDload4=$(date -u -d @$(($(date +%s) - $dtime4)) +%T)



echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload4]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"







echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [ytsearch]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audio]\n\n\n"










echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n\n"



unset -v inf4
unset -v f2
unset -v vtd2

exit




fi








;;

6)


# Menú principal


echo ""


;;


7)

# Salir de YTERMUX-V2.03.12


echo -e "\033[1;37m\n\n\n[Saliendo de YTERMUX-V2.3.12]\033[0m\n"
sleep 1

exit





;;

*)

echo -e "\n\n\n\033[1;37m[\033[0m\033[2;33m INF/ERROR\033[0m \033[0;37m|\033[0m INGRESO INCORRECTO REINTENTE NUEVAMENTE \033[1;37m]\033[0m"

sleep 1




;;


esac






#
#
#
######################### AUDIO-YTSEARCH-STREAMING ########################





 ;;


# Salida


4) echo ""


;;


5)


echo -e "\033[1;37m\n\n\n[Saliendo de YTERMUX-V2.3.12]\033[0m\n"
sleep 1

exit
# Salida





;;


*) # Ingreso incorrecto reintente nuevamente.

echo -e "\n\n\n\033[1;37m[\033[0m\033[2;33m INF/ERROR\033[0m \033[0;37m|\033[0m INGRESO INCORRECTO REINTENTE NUEVAMENTE \033[1;37m]\033[0m"





sleep 1

;;


esac

break

done


}























function q2 {




while true; 

do




echo -e "\n\n\n\033[1;37m[☣] MODULO DE EXTRACODIFICACIÓN AUDIOVISUAL STREAMING\033[0m"


echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z | OPCIÓN 5\033[0m\n\n"


echo -e "\033[1;37m[1]\033[0m single-streaming\n"



echo -e "\033[1;37m[2]\033[0m duo-streaming\n"

echo -e "\033[1;37m[3]\033[0m verificación url-streaming\n"

echo -e "\033[1;37m[4]\033[0m menú principal\n"

echo -e "\033[1;37m[5]\033[0m salir\n"




read -p "[☣] Digite selección: " -e md4








case $md4 in

1)











# SECCIÓN 3

echo -e "\n\n\n\033[1;37m[☣] SUB-MODULO SINGLE-STREAMING\033[0m"



echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"




# Plataformas


echo -e "\033[1;37mPlataformas:\033[0m \033[0;666;31m X\033[0m\033[0;666;37mvideos\033[0m \033[0;37m|\033[0m \033[0;44;37m Facebook™ \033[0m \033[0;37m|\033[0m \033[0;37m[\033[0mETC\033[0;37m]\033[0m"

echo -e "\n\n\033[1;37mEjemplo/URL:\033[0m https://www.xvideos.com/video.ihbflco44bc/blancanieves_masturbandose\n\n\n"






read -p "[☣] Digite URL: " -e uvs







if [[ -z ${uvs} ]]
 then





echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX-V2.3.12\n\n\n"








unset -v inf2
unset -v vtd3
unset -v f3







sleep 1
exit
fi




echo -e -n "\n\n\n\033[1;37m[Procesando formatos | SINGLE-STREAMING]\033[0m\n\n\n"







yt-dlp --prefer-free-formats --list-formats --no-playlist --ignore-errors --no-warnings $uvs




echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"


echo -e -n "[☣] Ejemplo \e[0;33mID\e[0m: \e[32mhls-360p\e[0m\n\n\n"






read -p "[☣] Digite ID: " -e i








if [[ -z ${i} ]]
then




echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX-V2.3.12\n\n\n"




unset -v inf2
unset -v f3
unset -v vtd3

sleep 1
exit
fi











############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########












dtime2=$(date +%s)


echo -e "\n\n\n\033[1;37m[Inicializando descarga | SINGLE-STREAMING]\033[0m\n\n"




######## Variables temporales ########
#
#

inf2=$(mktemp)

####################

f3=$(mktemp)



####################



rs3=$(mktemp)



####################


formato1=$(mktemp)

#
#
######## Variables temporales ########






yt-dlp --embed-metadata --no-playlist --force-overwrites --print-to-file "after_move:%(ext)s" "$formato1" --no-abort-on-error --ignore-errors --sub-langs "all" --write-subs --print-to-file "after_move:resolution" "$rs3" --no-part --print-to-file "after_move:filepath" "$f3" --print-to-file "%(title).56B..." "$inf2" -P "/data/data/com.termux/files/home/storage/downloads" -f $i --no-warnings --no-mtime -o "%(title).226B [%(resolution)s][YTERMUX-V2.3.12].%(ext)s" --output-na-placeholder "unknown" --merge-output-format "mp4" $uvs






file_scanner3=$(cat $f3)




infv2=$(cat $inf2)



rs3_3=$(cat $rs3)


formato1_1=$(cat $formato1)



unset -v formato1




if [[ -f "${file_scanner3}" ]]
then




############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#


f3_3=$(cat $f3)


#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################




############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#





read fd3 _ < <(ffmpeg -i "$f3_3" |& awk '/Duration:/ {print $2}')

vtd3=$(mktemp)

echo "$fd3" > "$vtd3"


read fileduracion3 _ < <(sed -e 's/\,//g' "$vtd3")




#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############


################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize3 _ < <(du -sh "$f3_3")






#
#
#
################# TAMAÑO DE FICHERO ####################






echo -e "\n\n\n\033[1;37m[Descarga exitosa | SINGLE-STREAMING]\033[0m\n\n\n"













echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | SINGLE-STREAMING\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv2]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"










#  DESCARGA EXITOSA
#
#  ✓ Duración de archivo
#  ✓ Tamaño de descarga
#  ✓ Resolución de descarga
#  ✓ Formato de descarga
#  ✓ Tipo de Descarga



echo -e "\n\033[1;37m[☣] Duracion de archivo:\033[0m [$fileduracion3]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize3]\n"


echo -e "\n\033[1;37m[☣] Resolución de video:\033[0m [$rs3_3]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [$formato1_1]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [video]\n"















echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"
















dDload2=$(date -u -d @$(($(date +%s) - $dtime2)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload2]\n"






echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"









echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [single-streaming]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audiovisual]\n"





unset -v inf2
unset -v vtd3
unset -v f3



echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | SINGLE-STREAMING]\033[0m\n\n\n"


















exit





else


echo -e "\n\n\n\033[1;37m[Descarga fallida | SINGLE-STREAMING]\033[0m\n\n\n"


echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | SINGLE-STREAMING\033[0m\n\n"






echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [video]\n"














echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"


















dDload2=$(date -u -d @$(($(date +%s) - $dtime2)) +%T)


echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload2]\n\n\n"


echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"






echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [single-streaming]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audiovisual]\n\n\n"





echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n\n"





unset -v inf2
unset -v vtd3
unset -v f3






exit




fi








;;







2)









# SECCIÓN 2


echo -e "\n\n\n\033[1;37m[☣] SUB-MODULO DUO-STREAMING\033[0m"




echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"





echo -e "\033[1;37mPlataformas:\033[0m \033[0;47;30m You\033[0m\033[0;41;37mTube \033[0m \033[0;37m|\033[0m \033[0;44;37m Facebook™ \033[0m \033[0;37m|\033[0m \033[0;46;37m Vimeo \033[0m \033[0;37m|\033[0m \033[0;37m[\033[0mETC\033[0;37m]\033[0m"


echo -e "\n\n\033[1;37mEjemplo/URL:\033[0m https://m.youtube.com/watch?v=w-o3jDYo8ew\n"





echo ""

read -p "[☣] Digite URL: " -e uvd



if [[ -z ${uvd} ]]
 then




echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"


sleep 1
echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX-V2.3.12\n\n\n"





unset -v inf2
unset -v vtd4
unset -v f4






sleep 1
exit
fi









echo -e -n "\n\n\n\033[1;37m[Procesando formatos | DUO-STREAMING]\033[0m\n\n\n"







yt-dlp --list-formats --no-playlist --ignore-errors --no-warnings $uvd



echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"



echo -e -n "[☣] Ejemplo \e[0;33mID\e[0m | \e[0;33mVIDEO\e[0m: \e[32m136\e[0m\n\n\n"




read -p "[☣] Digite ID | VIDEO: " -e i1




if [[ -z ${i1} ]]
then






echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m"

sleep 1
echo -e "\n\n\n\033[1;37m[DEBUG]\033[0m Digitación invalida"
sleep 1
echo -e "\n\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX-V2.3.12\n\n\n"







unset -v inf2
unset -v vtd4
unset -v f4



sleep 1
exit
fi



















echo -e "\n\n\n\033[1;37m[☣] Salir/cancelar: CTRL+C | CTRL+Z\033[0m\n\n"




echo -e -n "[☣] Ejemplo \e[0;33mID\e[0m | \e[0;33mAUDIO\e[0m: \e[32m251\e[0m\n\n\n"








read -p "[☣] Digite ID | AUDIO: " -e i2






























if [[ -z ${i2} ]]
then







echo -e "\n\n\n\033[1;37m[PROCESANDO/INFORME]\033[0m"

sleep 1
echo -e "\n\n\n\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX-V2.3.12\n\n\n"


unset -v inf2
unset -v vtd4
unset -v f4



sleep 1
exit
fi











inf3=$(mktemp)

dtime3=$(date +%s)




f4=$(mktemp)







############ Variable de fecha de iniciación de descarga ###########
#
#


fecha_de_iniciacion=$(date +%c)



#
#
############ Variable de fecha de iniciación de descarga ###########










echo -e "\n\n\n\033[1;37m[Inicializando descarga | DUO-STREAMING]\033[0m\n\n"



################## VARIABLES TEMPORALES ######
#


##################

#################

rs4=$(mktemp)


################



formato2=$(mktemp)





#
################## VARIABLES TEMPORALES ######






yt-dlp --embed-metadata --no-playlist --force-overwrites --print-to-file "after_move:%(ext)s" "$formato2" --no-abort-on-error --ignore-errors --sub-langs "all" --write-subs --print-to-file "after_move:resolution" "$rs4" --no-part --print-to-file "after_move:filepath" "$f4" --no-keep-video -o "%(title).226B [%(resolution)s][YTERMUX-V2.3.12].%(ext)s" --print-to-file "%(title).56B..." "$inf3" -P "/data/data/com.termux/files/home/storage/downloads" -f $i1+$i2 --no-mtime --no-warnings --output-na-placeholder "unknown" --merge-output-format "mp4" $uvd
















file_scanner4=$(cat $f4)




infv3=$(cat $inf3)






rs4_4=$(cat $rs4)







formato2_2=$(cat $formato2)



unset -v formato2





if [[ -f "${file_scanner4}" ]]
then










############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################
#
#


f4_4=$(cat $f4)


#
#
############ VARIABLE FILEPATH O DIRECTORIO Y FICHERO #####################




############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############
#
#




read fd4 _ < <(ffmpeg -i "$f4_4" |& awk '/Duration:/ {print $2}')

vtd4=$(mktemp)

echo "$fd4" > "$vtd4"

read fileduracion4 _ < <(sed -e 's/\,//g' "$vtd4")





#
#
############ DURACIÓN Y EXCLUSIÓN DE CARACTERES ESPECIALES ###############








################## TAMAÑO DE FICHERO ##################
#
#
#




read filesize4 _ < <(du -sh "$f4_4")






#
#
#
################# TAMAÑO DE FICHERO ####################











echo -e "\n\n\n\033[1;37m[Descarga exitosa | DUO-STREAMING]\033[0m\n\n\n"



















echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | DUO-STREAMING\033[0m\n\n"



  echo -e "\033[1;37m[☣] Título de descarga:\033[0m  [$infv3]\n"

echo -e "\n\033[1;37m[☣] Almacenada en ruta:\033[0m  [/data/data/com.termux/files/home/storage/downloads]\n"




#  DESCARGA EXITOSA
#
#  ✓ Duración de archivo
#  ✓ Tamaño de descarga
#  ✓ Resolución de descarga
#  ✓ Formato de descarga
#  ✓ Tipo de Descarga



echo -e "\n\033[1;37m[☣] Duracion de archivo:\033[0m [$fileduracion4]\n"


echo -e "\n\033[1;37m[☣] Tamaño de descarga:\033[0m  [$filesize4]\n"


echo -e "\n\033[1;37m[☣] Resolución de video:\033[0m [$rs4_4]\n"


echo -e "\n\033[1;37m[☣] Formato de descarga:\033[0m [$formato2_2]\n"


echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [video]\n"









echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"















dDload3=$(date -u -d @$(($(date +%s) - $dtime3)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload3]\n"





echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [exitosa]\n"








echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [duo-streaming]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audiovisual]\n"






























unset -v inf3
unset -v f4
unset -v vtd4













echo -e "\n\n\033[1;37m[Finalizo proceso de descarga | DUO-STREAMING]\033[0m\n\n\n"














exit




else

echo -e "\n\n\n\033[1;37m[Descarga fallida | DUO-STREAMING]\033[0m\n\n\n"







echo -e "\033[1;37m[☣] INFORMACIÓN DE DESCARGA | DUO-STREAMING\033[0m\n\n"













echo -e "\n\033[1;37m[☣] Tipo de descarga:\033[0m    [video]\n"

echo -e "\n\033[1;37m[☣] Fecha de iniciacion:\033[0m [$fecha_de_iniciacion]\n"













fecha_finalizacion=$(date +%c)

echo -e "\n\033[1;37m[☣] Fecha finalizacion:\033[0m  [$fecha_finalizacion]\n"












dDload3=$(date -u -d @$(($(date +%s) - $dtime3)) +%T)




echo -e "\n\033[1;37m[☣] Tiempo de ejecución:\033[0m [$dDload3]\n"






echo -e "\n\033[1;37m[☣] Estado de descarga:\033[0m  [fallida]\n"





echo -e "\n\033[1;37m[☣] Sub-modulo:\033[0m          [duo-streaming]\n"

echo -e "\n\033[1;37m[☣] Modulo:\033[0m              [audiovisual]\n\n\n"




























echo -e "\033[1;37m[Saliendo de YTERMUX-V2.3.12]\033[0m\n\n"


unset -v inf3
unset -v f4
unset -v vtd4

exit


fi






;;








3)


# SECCIÓN 3




echo -e "\n\n\n\033[1;37m[☣] SUB-MODULO DE VERIFICACIÓN DE URL-STREAMING\033[0m\n\n\n"

echo -e "\033[1;37m[☣] INFORMACIÓN DE SUB-MODULO\033[0m\n\n"

echo -e "\033[1;37mEste modulo muestra ejemplos de las distribuciones url-streaming y extrae la lista de formatos de la url-streaming para conocer que tipo de distribución streaming requiere o estan habilitadas dentro de YTERMUX-V2.3.12 para extracodificar url-streaming en extracciones audiovisuales.\033[0m\n\n\n"




echo -e "\033[1;37m[☣] MENÚ SUB-MODULO DE VERIFICACIÓN URL-STREAMING\033[0m\n\n"



echo -e "\n\033[1;37m[☣] Salir/cancelar: CTRL+Z | CTRL+C | OPCIÓN 4\033[0m\n\n"

echo -e "\033[1;37m[1] extractor de lista formatos\n\033[0m"

echo -e "\033[1;37m[2] ejemplos de distribuciones streaming\033[0m\n"

echo -e "\033[1;37m[3] menú principal\033[0m\n"

echo -e "\033[1;37m[4] salir\n\033[0m"



read -p "[☣] Digite selección: " -e opcion



if [[ -z ${opcion} ]]
then




echo ""
echo ""
echo -e "\033[1;37m[PROCESANDO/INFORME]\033[0m\n\n\n"
sleep 1




echo -e "\033[1;37m[DEBUG]\033[0m Digitación invalida\n"
sleep 1
echo -e "\n\033[1;37m[DEBUG]\033[0m Saliendo de YTERMUX-V2.3.12\n\n\n"




sleep 1
exit
fi









if [[ ${opcion} == 1 ]]

then


echo -e "\033[1;37m\n\n\n[☣] MINI-SUB-MODULO EXTRACTOR DE LISTA DE FORMATOS\n\n\n\033[0m"


echo -e "\033[1;37m[☣] Salir/Cancelar: CTRL+Z | CTRL+C\n\n\033[0m"


echo -e "\033[1;37m[☣] EJemplo URL: https://m.youtube.com/watch?v=w-o3jDYo8ew\n\n\033[0m"

read -p "[☣] Digite url: " -e url


echo -e "\033[1;37m\n\n\n\033[1;37m[Procesando lista de formatos]\033[0m\n\n\033[0m"



yt-dlp -uV --no-playlist --no-abort-on-error --no-warnings --ignore-errors --print "%(formats_table)s" $url


echo ""
echo ""
echo -e "\033[1;37m\033[1;37m[Procesamiento finalizado]\033[0m\n\n\033[0m"



exit

elif [[ ${opcion} == 2 ]]


then




echo -e "\n\n\n\033[1;37m[☣] MINI-SUB-MODULO DE EJEMPLOS DE DISTRIBUCIONES STREAMING\033[0m\n\n\n"

echo -e "\033[1;37m[☣] Salir/Cancelar: CTRL+Z | CTRL+C\n\033[0m"







echo -e "\n\n\033[1;37m[☣] Ejemplos Duo-stream u Duo-streaming\n\n\033[0m"





echo -e "\033[1;37mURLS-STREAMING con IDS de forma separada del audio y el video.\033[0m"






echo -e "\n\n\033[1;37m\nEjemplo:\n\n\n\033[0m"









# Lista Youtube





echo -e "Plataforma: \033[0;47;30m You\033[0m\033[0;41;37mTube \033[0m\n\n"



yt-dlp --no-warnings --print "%(formats_table)s" https://m.youtube.com/watch?v=w-o3jDYo8ew








iddsv=$(yt-dlp --no-warnings --print "%(formats_table)s" https://m.youtube.com/watch?v=w-o3jDYo8ew | grep "137")





# ID Duo-streaming video



echo -e "\n\n\033[0;33mID\033[0m \033[1;37mvideo:\033[0m \033[0;32m137\033[0m"





echo -e "\n\n\033[0;32m$iddsv\033[0m"


iddsa=$(yt-dlp --no-warnings --print "%(formats_table)s" https://m.youtube.com/watch?v=w-o3jDYo8ew | grep "251")





echo ""

echo ""






# ID Duo-streaming audio



echo -e "\033[0;33mID\033[0m \033[1;37maudio:\033[0m \033[0;32m251\033[0m"



echo -e "\n\n\033[0;32m$iddsa\033[0m"




echo -e "\n\n\n\n\033[1;37m[☣] Ejemplos Single-stream u Single-streaming\n\n\033[0m"



echo -e "\033[1;37mURLS-STREAMING con IDS de forma unificada del audio y el video, o del audio y el video en un solo ID.\033[0m"


echo -e "\n\n\n\033[1;37mEjemplos:\n\n\033[0m"








echo -e "Plataforma: \033[0;666;31m X\033[0m\033[0;666;37mvideos\033[0m\n\n"


# Lista Xvideos

yt-dlp --no-warnings --print "%(formats_table)s" https://www.xvideos.com/video.ihbflco44bc/blancanieves_masturbandose

echo ""
echo ""






echo -e "Plataforma: \033[0;44;37m Facebook™ \033[0m\n\n"



# Lista Facebook

yt-dlp --no-warnings --print "%(formats_table)s" https://www.facebook.com/share/v/19KPfwrSf6/








# ID Single streaming

echo ""
echo ""







echo -e "\033[0;33mID\033[0m \033[1;37msingle streaming:\033[0m \033[0;32msd\033[0m"






echo ""








idss=$(yt-dlp --no-warnings --print "%(formats_table)s" https://www.facebook.com/share/v/19KPfwrSf6/ | grep 'sd')


echo -e "\033[0;32m$idss\033[0m"




echo ""
echo ""



exit


elif [[ ${opcion} == 3 ]]

then



echo ""


elif [[ ${opcion} == 4 ]]

then




echo -e "\033[1;37m\n\n\n[Saliendo de YTERMUX-V2.3.12]\033[0m\n"

sleep 1
exit








else








echo -e "\n\n\n\033[1;37m[\033[0m\033[2;33m INF/ERROR\033[0m \033[0;37m|\033[0m INGRESO INCORRECTO REINTENTE NUEVAMENTE \033[1;37m]\033[0m"






sleep 1








fi










;;







4)




echo ""






;;


5)

echo -e "\033[1;37m\n\n\n[Saliendo de YTERMUX-V2.3.12]\033[0m\n"
sleep 1

exit
# Salida


;;


*) echo -e "\n\n\n\033[1;37m[\033[0m\033[2;33m INF/ERROR\033[0m \033[0;37m|\033[0m INGRESO INCORRECTO REINTENTE NUEVAMENTE \033[1;37m]\033[0m"
sleep 1
# Ingreso incorrecto reintente nuevamente.

;;


esac


break


done


}









function q3 {


echo -e "\033[1;37m\n\n\n[Saliendo de YTERMUX-V2.3.12]\033[0m\n"
sleep 1
# Salida



exit


}









end_script=0
while [[ "${end_script}" != 1 ]];do
    mytermx
    case ${q} in
    1)
       q1
    ;;
       
    2)
       q2
    ;;
     
    3) 
       q3
    ;;

    *) echo -e "\n\n\n\033[1;37m[\033[0m\033[2;33m INF/ERROR\033[0m \033[0;37m|\033[0m INGRESO INCORRECTO REINTENTE NUEVAMENTE \033[1;37m]\033[0m"

sleep 1



    ;;
    
    esac
done



